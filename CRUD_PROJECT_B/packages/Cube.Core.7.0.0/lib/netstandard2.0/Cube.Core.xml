<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cube.Core</name>
    </assembly>
    <members>
        <member name="T:Cube.Getter`1">
            
             Getter
            
             <summary>
             Represents the delegation to get a value of type T.
             </summary>
            
        </member>
        <member name="T:Cube.Setter`1">
            
             Setter
            
             <summary>
             Represents the delegation to set a value of type T.
             </summary>
            
        </member>
        <member name="T:Cube.Accessor`1">
            
             Accessor
            
             <summary>
             Provides functionality to get and set a value of type T.
             </summary>
            
        </member>
        <member name="M:Cube.Accessor`1.#ctor">
            
             Accessor
            
             <summary>
             Initializes a new instance of the Accessor class.
             </summary>
            
        </member>
        <member name="M:Cube.Accessor`1.#ctor(`0)">
            
             Accessor
            
             <summary>
             Initializes a new instance of the Accessor class with the
             specified value.
             </summary>
            
             <param name="value">Initial value.</param>
            
        </member>
        <member name="M:Cube.Accessor`1.#ctor(`0,System.Collections.Generic.IEqualityComparer{`0})">
            
             Accessor
            
             <summary>
             Initializes a new instance of the Accessor class with the
             specified delegations.
             </summary>
            
             <param name="value">Initial value.</param>
             <param name="comparer">Object to compare two values.</param>
            
        </member>
        <member name="M:Cube.Accessor`1.#ctor(Cube.Getter{`0})">
            
             Accessor
            
             <summary>
             Initializes a new instance of the Accessor class with the
             specified delegation.
             </summary>
            
             <param name="getter">Function to get a value.</param>
            
             <remarks>
             Throws InvalidOperationException when the Set method is invoked.
             </remarks>
            
        </member>
        <member name="M:Cube.Accessor`1.#ctor(Cube.Getter{`0},Cube.Setter{`0})">
            
             Accessor
            
             <summary>
             Initializes a new instance of the Accessor class with the
             specified delegations.
             </summary>
            
             <param name="getter">Function to get a value.</param>
             <param name="setter">Function to set a value.</param>
            
        </member>
        <member name="M:Cube.Accessor`1.#ctor(Cube.Getter{`0},Cube.Setter{`0},System.Collections.Generic.IEqualityComparer{`0})">
            
             Accessor
            
             <summary>
             Initializes a new instance of the Accessor class with the
             specified delegations.
             </summary>
            
             <param name="getter">Function to get a value.</param>
             <param name="setter">Function to set a value.</param>
             <param name="comparer">Object to compare two values.</param>
            
        </member>
        <member name="M:Cube.Accessor`1.Get">
            
             Get
            
             <summary>
             Get a value.
             </summary>
            
             <returns>Result of the provided Getter(T) delegation.</returns>
            
        </member>
        <member name="M:Cube.Accessor`1.Set(`0)">
            
             Get
            
             <summary>
             Set a new value.
             </summary>
            
             <param name="value">Value to be set.</param>
            
             <returns>
             Value indicating whether to be executed the provided Setter(T)
             delegation.
             </returns>
            
        </member>
        <member name="T:Cube.IAggregator">
            
             IAggregator
            
             <summary>
             Represents the interface of the aggregator.
             </summary>
            
        </member>
        <member name="M:Cube.IAggregator.Subscribe``1(System.Action{``0})">
            
             Subscribe
            
             <summary>
             Subscribes the message of type T.
             </summary>
            
             <typeparam name="T">Message type.</typeparam>
            
             <param name="callback">
             Callback function for the message of type T.
             </param>
            
             <returns>Object to clear the subscription.</returns>
            
        </member>
        <member name="T:Cube.Aggregator">
            
             Aggregator
            
             <summary>
             Represents the type based message aggregator.
             </summary>
            
        </member>
        <member name="M:Cube.Aggregator.#ctor">
            
             Aggregator
            
             <summary>
             Initializes a new instance of the Aggregator class.
             </summary>
            
        </member>
        <member name="M:Cube.Aggregator.#ctor(System.Int32)">
            
             Aggregator
            
             <summary>
             Initializes a new instance of the Aggregator class with the specified
             capacity.
             </summary>
            
             <param name="capacity">
             Capacity of the internal hash table. If zero is specified,
             the initial capacity of the Hashtable class will be used.
             </param>
            
             <remarks>
             Due to the specification of the Hashtable class, the actual
             capacity will be as follows:
            
             [0,   3] to  2.16 ( 3 * 0.72),
             [4,   7] to  5.04 ( 7 * 0.72),
             [8,  11] to  7.92 (11 * 0.72),
             [12, 17] to 12.24 (17 * 0.72),
             [18, 23] to 16.56 (23 * 0.72),
             [24, 29] to 20.88 (29 * 0.72),
             [30, 37] to 26.64 (37 * 0.72).
             </remarks>
            
        </member>
        <member name="M:Cube.Aggregator.Publish``1(``0)">
            
             Publish
            
             <summary>
             Publishes the specified message.
             </summary>
            
             <param name="message">Message to be published.</param>
            
        </member>
        <member name="M:Cube.Aggregator.Subscribe``1(System.Action{``0})">
            
             Subscribe
            
             <summary>
             Subscribes the message of type T.
             </summary>
            
             <typeparam name="T">Message type.</typeparam>
            
             <param name="callback">
             Callback function for the message of type T.
             </param>
            
             <returns>Object to clear the subscription.</returns>
            
        </member>
        <member name="M:Cube.Aggregator.Get(System.Type)">
            
             Get
            
             <summary>
             Gets the object of the specified key.
             </summary>
            
        </member>
        <member name="M:Cube.Aggregator.GetOrAdd(System.Type)">
            
             GetOrAdd
            
             <summary>
             Gets the object of the specified key.
             </summary>
            
        </member>
        <member name="T:Cube.AsyncAction">
            
             AsyncAction
            
             <summary>
             Represents the method to invoke as an asynchronous method.
             </summary>
            
        </member>
        <member name="T:Cube.IBindable">
            
             IBindable
            
             <summary>
             Represents the interface of bindable components.
             </summary>
            
        </member>
        <member name="T:Cube.Collections.Argument">
            
             Argument
            
             <summary>
             Specifies prefix kinds of optional parameters.
             </summary>
            
        </member>
        <member name="F:Cube.Collections.Argument.Posix">
            <summary>Allows only the '-' prefix, and option names are all one character.</summary>
        </member>
        <member name="F:Cube.Collections.Argument.Gnu">
            <summary>Allows '-' and '--' prefix, the latter is known as long-named options.</summary>
        </member>
        <member name="F:Cube.Collections.Argument.Dos">
            <summary>Allows only the '/' prefix, and treated as long-named options.</summary>
        </member>
        <member name="F:Cube.Collections.Argument.Windows">
            <summary>Allows '/', '-', and '--' prefix, and all of them are treated as long-named options.</summary>
        </member>
        <member name="T:Cube.Collections.ArgumentExtension">
            
             ArgumentExtension
            
             <summary>
             Provides extended methods of the Argument enumeration.
             </summary>
            
        </member>
        <member name="P:Cube.Collections.ArgumentExtension.Map">
            
             Map
            
             <summary>
             Gets the map of Argument values and preprocessors.
             </summary>
            
        </member>
        <member name="M:Cube.Collections.ArgumentExtension.Get(Cube.Collections.Argument)">
            
             Get
            
             <summary>
             Gets the preprocessor from the specified kind.
             </summary>
            
        </member>
        <member name="T:Cube.Collections.ArgumentCollection">
            
             ArgumentCollection
            
             <summary>
             Provides functionality to parse arguments.
             </summary>
            
             <remarks>
             The class imposes the restriction that each option can only have
             at most one argument, and all other arguments are stored in their
             own sequence. If the same option is specified more than once,
             it will be overwritten by the content specified later.
             </remarks>
            
        </member>
        <member name="M:Cube.Collections.ArgumentCollection.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            
             ArgumentCollection
            
             <summary>
             Initializes a new instance of the ArgumentCollection class with
             the specified arguments.
             </summary>
            
             <param name="src">Source arguments.</param>
            
        </member>
        <member name="M:Cube.Collections.ArgumentCollection.#ctor(System.Collections.Generic.IEnumerable{System.String},Cube.Collections.Argument)">
            
             ArgumentCollection
            
             <summary>
             Initializes a new instance of the ArgumentCollection class with
             the specified arguments.
             </summary>
            
             <param name="src">Source arguments.</param>
             <param name="kind">Prefix kind of optional parameters.</param>
            
        </member>
        <member name="M:Cube.Collections.ArgumentCollection.#ctor(System.Collections.Generic.IEnumerable{System.String},Cube.Collections.Argument,System.Boolean)">
            
             ArgumentCollection
            
             <summary>
             Initializes a new instance of the ArgumentCollection class with
             the specified arguments.
             </summary>
            
             <param name="src">Source arguments.</param>
             <param name="kind">Prefix kind of optional parameters.</param>
             <param name="ignoreCase">
             Value indicating whether to ignore the case of optional keys.
             </param>
            
        </member>
        <member name="M:Cube.Collections.ArgumentCollection.#ctor(System.Collections.Generic.IEnumerable{System.String},Cube.Collections.IArgumentPreprocessor,System.Boolean)">
            
             ArgumentCollection
            
             <summary>
             Initializes a new instance of the ArgumentCollection class with
             the specified arguments.
             </summary>
            
             <param name="src">Source arguments.</param>
            
             <param name="preprocessor">
             Object to be invoked before parsing.
             </param>
            
             <param name="ignoreCase">
             Value indicating whether to ignore the case of optional keys.
             </param>
            
        </member>
        <member name="P:Cube.Collections.ArgumentCollection.IgnoreCase">
            
             IgnoreCase
            
             <summary>
             Gets the value indicating whether to ignore the case of optional
             keys.
             </summary>
            
        </member>
        <member name="P:Cube.Collections.ArgumentCollection.Item(System.Int32)">
            
             Item(int)
            
             <summary>
             Gets the collection of arguments except for optional parameters.
             </summary>
            
        </member>
        <member name="P:Cube.Collections.ArgumentCollection.Count">
            
             Count
            
             <summary>
             Gets the number of arguments except for optional parameters.
             </summary>
            
        </member>
        <member name="P:Cube.Collections.ArgumentCollection.Options">
            
             Options
            
             <summary>
             Gets the collection of optional parameters.
             </summary>
            
        </member>
        <member name="P:Cube.Collections.ArgumentCollection.Preprocessor">
            
             Preprocessor
            
             <summary>
             Gets a preprocessor that is invoked before parsing.
             </summary>
            
        </member>
        <member name="M:Cube.Collections.ArgumentCollection.GetEnumerator">
            
             GetEnumerator
            
             <summary>
             Returns an enumerator that iterates through a collection.
             </summary>
            
             <returns>
             Enumerator that can be used to iterate through the collection.
             </returns>
            
        </member>
        <member name="M:Cube.Collections.ArgumentCollection.Dispose(System.Boolean)">
            
             Dispose
            
             <summary>
             Releases the unmanaged resources used by the object and
             optionally releases the managed resources.
             </summary>
            
             <param name="disposing">
             true to release both managed and unmanaged resources;
             false to release only unmanaged resources.
             </param>
            
        </member>
        <member name="M:Cube.Collections.ArgumentCollection.Invoke(System.Collections.Generic.IEnumerable{System.String})">
            
             Invoke
            
             <summary>
             Parses the specified arguments.
             </summary>
            
        </member>
        <member name="T:Cube.Collections.IArgumentPreprocessor">
            
             IArgumentPreprocessor
            
             <summary>
             Represents interface to process the provided arguments before
             parsing.
             </summary>
            
        </member>
        <member name="M:Cube.Collections.IArgumentPreprocessor.Invoke(System.Collections.Generic.IEnumerable{System.String})">
            
             Invoke
            
             <summary>
             Invokes the processing.
             </summary>
            
             <param name="src">Source arguments.</param>
            
             <returns>Normalized arguments.</returns>
            
        </member>
        <member name="T:Cube.Collections.PosixArgumentPreprocessor">
            
             PosixArgumentPreprocessor
            
             <summary>
             Provides functionality to process the POSIX based arguments.
             </summary>
            
             <remarks>
             Treats a '-foption_argument' option as '-f', '-o', '-p', and more.
             </remarks>
            
             <seealso href="http://pubs.opengroup.org/onlinepubs/009696899/basedefs/xbd_chap12.html" />
            
        </member>
        <member name="M:Cube.Collections.PosixArgumentPreprocessor.Invoke(System.Collections.Generic.IEnumerable{System.String})">
            
             Invoke
            
             <summary>
             Invokes the processing.
             </summary>
            
             <param name="src">Source arguments.</param>
            
             <returns>Normalized arguments.</returns>
            
        </member>
        <member name="M:Cube.Collections.PosixArgumentPreprocessor.Convert(System.String)">
            
             Convert
            
             <summary>
             Converts the specified argument.
             </summary>
            
        </member>
        <member name="M:Cube.Collections.PosixArgumentPreprocessor.AsEnumerable(Cube.Collections.ArgumentToken)">
            
             AsEnumerable
            
             <summary>
             Treats the specified value as enumerable.
             </summary>
            
        </member>
        <member name="T:Cube.Collections.GnuArgumentPreprocessor">
            
             GnuArgumentPreprocessor
            
             <summary>
             Provides functionality to process the GNU based arguments.
             </summary>
            
             <seealso href="https://www.gnu.org/prep/standards/html_node/Command_002dLine-Interfaces.html" />
            
        </member>
        <member name="M:Cube.Collections.GnuArgumentPreprocessor.Convert(System.String)">
            
             Convert
            
             <summary>
             Converts the specified argument.
             </summary>
            
        </member>
        <member name="T:Cube.Collections.DosArgumentPreprocessor">
            
             DosArgumentPreprocessor
            
             <summary>
             Provides functionality to process the DOS based arguments.
             </summary>
            
             <remarks>
             Allows only '/Foo' format.
             </remarks>
            
        </member>
        <member name="M:Cube.Collections.DosArgumentPreprocessor.Invoke(System.Collections.Generic.IEnumerable{System.String})">
            
             Invoke
            
             <summary>
             Invokes the normalization.
             </summary>
            
             <param name="src">Source arguments.</param>
            
             <returns>Normalized arguments.</returns>
            
        </member>
        <member name="M:Cube.Collections.DosArgumentPreprocessor.Convert(System.String)">
            
             Convert
            
             <summary>
             Converts the specified argument.
             </summary>
            
        </member>
        <member name="T:Cube.Collections.WindowsArgumentPreprocessor">
            
             WindowsArgumentPreprocessor
            
             <summary>
             Provides functionality to process the Windows based arguments.
             </summary>
            
             <remarks>
             Allows '/Foo', '-Foo', '--Foo' formats and all of them are treated
             as 'Foo' option, it means that the class does not allow the short
             named options like POSIX.
             </remarks>
            
        </member>
        <member name="M:Cube.Collections.WindowsArgumentPreprocessor.Convert(System.String)">
            
             Convert
            
             <summary>
             Converts the specified argument.
             </summary>
            
        </member>
        <member name="T:Cube.Collections.ArgumentToken">
            
             ArgumentToken
            
             <summary>
             Represents an item of arguments. The class is mainly used in the
             IArgumentPreprocessor implemented classes.
             </summary>
            
        </member>
        <member name="M:Cube.Collections.ArgumentToken.#ctor(System.String)">
            
             ArgumentToken
            
             <summary>
             Initializes a new instance of the ArgumentToken class with the
             specified value.
             </summary>
            
             <param name="value">Value of the argument.</param>
            
        </member>
        <member name="M:Cube.Collections.ArgumentToken.#ctor(System.String,System.String)">
            
             ArgumentToken
            
             <summary>
             Initializes a new instance of the ArgumentToken class with the
             specified arguments.
             </summary>
            
             <param name="value">Value of the argument.</param>
             <param name="prefix">Prefix of the argument.</param>
            
        </member>
        <member name="P:Cube.Collections.ArgumentToken.Value">
            
             Value
            
             <summary>
             Gets the value of the token.
             </summary>
            
        </member>
        <member name="P:Cube.Collections.ArgumentToken.Prefix">
            
             Prefix
            
             <summary>
             Gets the prefix value of the token.
             </summary>
            
        </member>
        <member name="T:Cube.Collections.Differences.CommonSequence`1">
            
             CommonSequence
            
             <summary>
             Represents the sequence of diff results.
             </summary>
            
        </member>
        <member name="M:Cube.Collections.Differences.CommonSequence`1.#ctor(System.Int32,System.Int32,System.Int32,Cube.Collections.Differences.CommonSequence{`0})">
            
             CommonSequence
            
             <summary>
             Initializes a new instance of the CommonSequence class with
             the specified arguments.
             </summary>
            
             <param name="older">Start position of the older content.</param>
             <param name="newer">Start position of the newer content.</param>
             <param name="count">Number of elements.</param>
             <param name="next">Next sequence.</param>
            
        </member>
        <member name="P:Cube.Collections.Differences.CommonSequence`1.OlderStart">
            
             OlderStart
            
             <summary>
             Get the start position of the older content.
             </summary>
            
        </member>
        <member name="P:Cube.Collections.Differences.CommonSequence`1.NewerStart">
            
             NewerStart
            
             <summary>
             Get the start position of the newer content.
             </summary>
            
        </member>
        <member name="P:Cube.Collections.Differences.CommonSequence`1.Count">
            
             Count
            
             <summary>
             Gets the number of elements in the content.
             </summary>
            
        </member>
        <member name="P:Cube.Collections.Differences.CommonSequence`1.Next">
            
             Next
            
             <summary>
             Gets the next sequence.
             </summary>
            
        </member>
        <member name="M:Cube.Collections.Differences.CommonSequence`1.Reverse">
            
             Reverse
            
             <summary>
             Reverses the provided linked list.
             </summary>
            
        </member>
        <member name="M:Cube.Collections.Differences.CommonSequence`1.ToResult(`0[],`0[],Cube.Collections.Differences.Condition,System.Boolean)">
            
             ToResult
            
             <summary>
             Converts to the collection of Result(T) objects.
             </summary>
            
        </member>
        <member name="M:Cube.Collections.Differences.CommonSequence`1.Create(Cube.Collections.Differences.Condition,`0[],System.Int32,System.Int32,`0[],System.Int32,System.Int32)">
            
             Create
            
             <summary>
             Creates a new instance of the Result(T) class.
             </summary>
            
        </member>
        <member name="M:Cube.Collections.Differences.CommonSequence`1.Slice(`0[],System.Int32,System.Int32)">
            
             Slice
            
             <summary>
             Gets the part of the specified collection.
             </summary>
            
        </member>
        <member name="T:Cube.Collections.Differences.OnpAlgorithm`1">
            
             OnpAlgorithm
            
             <summary>
             Provides functionality to detect the diff.
             </summary>
            
             <remarks>
             Sun Wu, Udi Manber, and Gene Myers, "An O(NP) Sequence Comparison
             Algorithm", Information Processing Letters Volume 35, Issue 6,
             pp. 317-323, September 1990.
             </remarks>
            
        </member>
        <member name="M:Cube.Collections.Differences.OnpAlgorithm`1.#ctor">
            
             OnpAlgorithm
            
             <summary>
             Initializes a new instance of the OnpAlgorithm class.
             </summary>
            
        </member>
        <member name="M:Cube.Collections.Differences.OnpAlgorithm`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            
             OnpAlgorithm
            
             <summary>
             Initializes a new instance of the OnpAlgorithm class with the
             specified comparer.
             </summary>
            
             <param name="comparer">Object to compare.</param>
            
        </member>
        <member name="M:Cube.Collections.Differences.OnpAlgorithm`1.Compare(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0},Cube.Collections.Differences.Condition)">
            
             Compare
            
             <summary>
             Compares the specified sequence and detects the diff of them.
             </summary>
            
             <param name="older">Older sequence.</param>
             <param name="newer">Newer sequence.</param>
             <param name="mask">Mask of the results.</param>
            
             <returns>Diff results.</returns>
            
        </member>
        <member name="M:Cube.Collections.Differences.OnpAlgorithm`1.Compare(`0[],`0[],Cube.Collections.Differences.Condition)">
            
             Compare
            
             <summary>
             Compares the specified sequence and detects the diff of them.
             </summary>
            
             <param name="older">Older sequence.</param>
             <param name="newer">Newer sequence.</param>
             <param name="mask">Mask of the results.</param>
            
             <returns>Diff results.</returns>
            
        </member>
        <member name="M:Cube.Collections.Differences.OnpAlgorithm`1.CompareEmpty(`0[],`0[],Cube.Collections.Differences.Condition)">
            
             CompareEmpty
            
             <summary>
             Compares the sequence.
             </summary>
            
        </member>
        <member name="M:Cube.Collections.Differences.OnpAlgorithm`1.Compare(Cube.Collections.Differences.Condition)">
            
             Compare
            
             <summary>
             Compares the sequence.
             </summary>
            
        </member>
        <member name="M:Cube.Collections.Differences.OnpAlgorithm`1.SearchSnake(System.Int32)">
            
             SearchSnake
            
             <summary>
             Detects the snake.
             </summary>
            
        </member>
        <member name="T:Cube.Collections.Differences.Condition">
            
             Condition
            
             <summary>
             Specifies the diff condition.
             </summary>
            
        </member>
        <member name="F:Cube.Collections.Differences.Condition.None">
            <summary>No diff.</summary>
        </member>
        <member name="F:Cube.Collections.Differences.Condition.Inserted">
            <summary>Older results are empty.</summary>
        </member>
        <member name="F:Cube.Collections.Differences.Condition.Deleted">
            <summary>Newer results are empty.</summary>
        </member>
        <member name="F:Cube.Collections.Differences.Condition.Changed">
            <summary>Changed content.</summary>
        </member>
        <member name="F:Cube.Collections.Differences.Condition.DiffOnly">
            <summary>Mask that indicates that there has been some change.</summary>
        </member>
        <member name="F:Cube.Collections.Differences.Condition.Any">
            <summary>Mask of all defined elements.</summary>
        </member>
        <member name="T:Cube.Collections.Differences.Result`1">
            
             Result
            
             <summary>
             Represents a part of the diff results.
             </summary>
            
        </member>
        <member name="M:Cube.Collections.Differences.Result`1.#ctor(Cube.Collections.Differences.Condition,System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})">
            
             Result
            
             <summary>
             Initializes a new instance of the Result class with the
             specified arguments.
             </summary>
            
             <param name="condition">Diff condition.</param>
             <param name="older">Target part of the older sequence.</param>
             <param name="newer">Target part of the newer sequence.</param>
            
        </member>
        <member name="P:Cube.Collections.Differences.Result`1.Condition">
            
             Condition
            
             <summary>
             Gets the diff condition.
             </summary>
            
        </member>
        <member name="P:Cube.Collections.Differences.Result`1.Older">
            
             Older
            
             <summary>
             Gets the target part of the older sequence.
             </summary>
            
        </member>
        <member name="P:Cube.Collections.Differences.Result`1.Newer">
            
             Newer
            
             <summary>
             Gets the target part of the newer sequence.
             </summary>
            
        </member>
        <member name="T:Cube.Collections.EnumerableBase`1">
            
             EnumerableBase
            
             <summary>
             Represents the simplest implementation of the IEnumerable(T)
             interface.
             </summary>
            
        </member>
        <member name="M:Cube.Collections.EnumerableBase`1.GetEnumerator">
            
             GetEnumerator
            
             <summary>
             Returns an enumerator that iterates through a collection.
             </summary>
            
             <returns>
             Enumerator that can be used to iterate through the collection.
             </returns>
            
        </member>
        <member name="M:Cube.Collections.EnumerableBase`1.System#Collections#IEnumerable#GetEnumerator">
            
             GetEnumerator
            
             <summary>
             Returns an enumerator that iterates through a collection.
             </summary>
            
             <returns>
             IEnumerator object that can be used to iterate through the
             collection.
             </returns>
            
        </member>
        <member name="T:Cube.Collections.LambdaComparer`1">
            
             LambdaComparer(T)
            
             <summary>
             Provides functionality to convert from the Func(T, T, bool) to
             the instance of Comparer(T) inherited class.
             </summary>
            
        </member>
        <member name="M:Cube.Collections.LambdaComparer`1.#ctor(System.Func{`0,`0,System.Int32})">
            
             LambdaComparer(T)
            
             <summary>
             Initializes a new instance of the LambdaComparer(T) with the
             specified function.
             </summary>
            
             <param name="src">Function to compare.</param>
            
        </member>
        <member name="M:Cube.Collections.LambdaComparer`1.Compare(`0,`0)">
            
             Compare
            
             <summary>
             Compares two objects of type T and returns an indication of
             their relative sort order.
             </summary>
            
             <param name="x">The first object to compare.</param>
             <param name="y">The second object to compare.</param>
            
             <returns>
             Zero if the specified objects are equal;
             Less than zero if x is less than y;
             otherwise, Greater than zero.
             </returns>
            
        </member>
        <member name="T:Cube.Collections.LambdaEqualityComparer`1">
            
             LambdaEqualityComparer(T)
            
             <summary>
             Provides functionality to convert from the Func(T, T, bool) to
             the instance of EqualityComparer(T) inherited class.
             </summary>
            
             <typeparam name="T">The type of objects to compare.</typeparam>
            
        </member>
        <member name="M:Cube.Collections.LambdaEqualityComparer`1.#ctor(System.Func{`0,`0,System.Boolean})">
            
             LambdaEqualityComparer(T)
            
             <summary>
             Initializes a new instance of the LambdaEqualityComparer(T)
             class with the specified comparer.
             </summary>
            
             <param name="src">Function to compare.</param>
            
        </member>
        <member name="M:Cube.Collections.LambdaEqualityComparer`1.#ctor(System.Func{`0,`0,System.Boolean},System.Func{`0,System.Int32})">
            
             LambdaEqualityComparer(T)
            
             <summary>
             Initializes a new instance of the LambdaEqualityComparer(T)
             class with the specified arguments.
             </summary>
            
             <param name="src">Function to compare.</param>
             <param name="hash">Function to convert to the hash code.</param>
            
        </member>
        <member name="M:Cube.Collections.LambdaEqualityComparer`1.Equals(`0,`0)">
            
             Equals
            
             <summary>
             Determines whether two objects of type T are equal.
             </summary>
            
             <param name="x">The first object to compare.</param>
             <param name="y">The second object to compare.</param>
            
             <returns>
             true if the specified objects are equal; otherwise, false.
             </returns>
            
        </member>
        <member name="M:Cube.Collections.LambdaEqualityComparer`1.GetHashCode(`0)">
            
             GetHashCode
            
             <summary>
             Serves as a hash function for the specified object for hashing
             algorithms and data structures, such as a hash table.
             </summary>
            
             <param name="obj">
             The object for which to get a hash code.
             </param>
            
             <returns>Hash code for the specified object.</returns>
            
        </member>
        <member name="T:Cube.Collections.NumericStringComparer">
            
             NumericStringComparer
            
             <summary>
             Represents a string comparison operation that considers numeric
             values.
             </summary>
            
        </member>
        <member name="M:Cube.Collections.NumericStringComparer.#ctor">
            
             NumericStringComparer
            
             <summary>
             Initializes a new instance of the NumericAwareComparer class.
             </summary>
            
        </member>
        <member name="M:Cube.Collections.NumericStringComparer.#ctor(System.StringComparer)">
            
             NumericStringComparer
            
             <summary>
             Initializes a new instance of the NumericAwareComparer class
             with the specified arguments.
             </summary>
            
             <param name="src">Raw string comparer.</param>
            
        </member>
        <member name="M:Cube.Collections.NumericStringComparer.Compare(System.String,System.String)">
            
             Compare
            
             <summary>
             Compares two string objects and returns an indication of their
             relative sort order.
             </summary>
            
             <param name="x">The first object to compare.</param>
             <param name="y">The second object to compare.</param>
            
             <returns>
             Zero if the specified objects are equal;
             Less than zero if x is less than y;
             otherwise, Greater than zero.
             </returns>
            
        </member>
        <member name="M:Cube.Collections.NumericStringComparer.Equals(System.String,System.String)">
            
             Equals
            
             <summary>
             Determines whether two string objects are equal.
             </summary>
            
             <param name="x">The first object to compare.</param>
             <param name="y">The second object to compare.</param>
            
             <returns>
             true if the specified objects are equal; otherwise, false.
             </returns>
            
        </member>
        <member name="M:Cube.Collections.NumericStringComparer.GetHashCode(System.String)">
            
             GetHashCode
            
             <summary>
             Serves as a hash function for the specified object for hashing
             algorithms and data structures, such as a hash table.
             </summary>
            
             <param name="obj">
             The object for which to get a hash code.
             </param>
            
             <returns>Hash code for the specified object.</returns>
            
        </member>
        <member name="M:Cube.Collections.NumericStringComparer.Compare(System.CharEnumerator,System.CharEnumerator)">
            
             Compare
            
             <summary>
             Compares two objects and returns an indication of their relative
             sort order.
             </summary>
            
        </member>
        <member name="M:Cube.Collections.NumericStringComparer.GetNumericString(System.CharEnumerator)">
            
             GetNumericString
            
             <summary>
             Gets a substring of the specified char enumerator object
             that represents a numeric value.
             </summary>
            
        </member>
        <member name="T:Cube.Collections.ObservableBase`1">
            
             ObservableBase
            
             <summary>
             Represents the base class of a dynamic data collection that
             provides notifications when items get added, removed, or when the
             whole list is refreshed.
             </summary>
            
        </member>
        <member name="M:Cube.Collections.ObservableBase`1.#ctor">
            
             ObservableBase
            
             <summary>
             Initializes a new instance of the ObservableBase class.
             </summary>
            
        </member>
        <member name="M:Cube.Collections.ObservableBase`1.#ctor(Cube.Dispatcher)">
            
             ObservableBase
            
             <summary>
             Initializes a new instance of the ObservableBase class with
             the specified dispatcher.
             </summary>
            
             <param name="dispatcher">Dispatcher object.</param>
            
        </member>
        <member name="P:Cube.Collections.ObservableBase`1.Dispatcher">
            
             Dispatcher
            
             <summary>
             Gets or sets the dispatcher object.
             </summary>
            
        </member>
        <member name="E:Cube.Collections.ObservableBase`1.CollectionChanged">
            
             CollectionChanged
            
             <summary>
             Occurs when an item is added, removed, changed, moved,
             or the entire list is refreshed.
             </summary>
            
        </member>
        <member name="M:Cube.Collections.ObservableBase`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            
             OnCollectionChanged
            
             <summary>
             Raises the CollectionChanged event with the provided arguments.
             </summary>
            
             <param name="e">Arguments of the event being raised.</param>
            
        </member>
        <member name="T:Cube.Collections.OrderedDictionary`2">
            
             OrderedDictionary(TKey, TValue)
            
             <summary>
             Represents a dictionary that preserves the insertion order.
             </summary>
            
        </member>
        <member name="M:Cube.Collections.OrderedDictionary`2.#ctor">
            
             OrderedDictionary(TKey, TValue)
            
             <summary>
             Initializes a new instance of the OrderedDictionary(TKey, TValue)
             class.
             </summary>
            
        </member>
        <member name="M:Cube.Collections.OrderedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            
             OrderedDictionary
            
             <summary>
             Initializes a new instance of the OrderedDictionary(TKey, TValue)
             class with the specified collection.
             </summary>
            
             <param name="cp">Collection to be copied.</param>
            
        </member>
        <member name="P:Cube.Collections.OrderedDictionary`2.Count">
            
             Count
            
             <summary>
             Gets the number of key/values pairs.
             </summary>
            
        </member>
        <member name="P:Cube.Collections.OrderedDictionary`2.IsReadOnly">
            
             IsReadOnly
            
             <summary>
             Gets a value indicating whether the OrderedDictionary(TKey, TValue)
             collection is read-only.
             </summary>
            
        </member>
        <member name="P:Cube.Collections.OrderedDictionary`2.Item(`0)">
            
             Item(TKey)
            
             <summary>
             Gets or sets the value with the specified key.
             </summary>
            
        </member>
        <member name="P:Cube.Collections.OrderedDictionary`2.Item(System.Int32)">
            
             Item(int)
            
             <summary>
             Gets or sets the value at the specified index.
             </summary>
            
        </member>
        <member name="P:Cube.Collections.OrderedDictionary`2.Keys">
            
             Keys
            
             <summary>
             Gets an ICollection(TKey) object containing the keys in the
             OrderedDictionary(TKey, TValue) collection.
             </summary>
            
        </member>
        <member name="P:Cube.Collections.OrderedDictionary`2.Values">
            
             Values
            
             <summary>
             Gets an ICollection(TValue) object containing the values in the
             OrderedDictionary(TKey, TValue) collection.
             </summary>
            
        </member>
        <member name="M:Cube.Collections.OrderedDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            
             Contains
            
             <summary>
             Determines whether the OrderedDictionary(TKey, TValue) collection
             contains a specific item.
             </summary>
            
             <param name="item">
             Item to locate in the OrderedDictionary(TKey, TValue) collection.
             </param>
            
             <returns>
             true if the OrderedDictionary(TKey, TValue) collection contains an
             item; otherwise, false.
             </returns>
            
        </member>
        <member name="M:Cube.Collections.OrderedDictionary`2.ContainsKey(`0)">
            
             ContainsKey
            
             <summary>
             Determines whether the OrderedDictionary(TKey, TValue) collection
             contains a specific key.
             </summary>
            
             <param name="key">
             Key to locate in the OrderedDictionary(TKey, TValue) collection.
             </param>
            
             <returns>
             true if the OrderedDictionary(TKey, TValue) collection contains an
             element with the specified key; otherwise, false.
             </returns>
            
        </member>
        <member name="M:Cube.Collections.OrderedDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            
             Add
            
             <summary>
             Adds an entry with the specified KeyValuePair(TKey, TValue) object
             into the OrderedDictionary(TKey, TValue) collection with the lowest
             available index.
             </summary>
            
             <param name="item">Key/value pair of the entry to add.</param>
            
        </member>
        <member name="M:Cube.Collections.OrderedDictionary`2.Add(`0,`1)">
            
             Add
            
             <summary>
             Adds an entry with the specified key and value into the
             OrderedDictionary(TKey, TValue) collection with the lowest available
             index.
             </summary>
            
             <param name="key">Key of the entry to add.</param>
             <param name="value">Value of the entry to add. </param>
            
        </member>
        <member name="M:Cube.Collections.OrderedDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            
             Remove
            
             <summary>
             Removes the entry with the specified key/value pair from the
             OrderedDictionary(TKey, TValue) collection.
             </summary>
            
             <param name="item">Key/value pair of the entry to remove.</param>
            
             <returns>
             true for success; otherwise, false.
             </returns>
            
        </member>
        <member name="M:Cube.Collections.OrderedDictionary`2.Remove(`0)">
            
             Remove
            
             <summary>
             Removes the entry with the specified key from the
             OrderedDictionary(TKey, TValue) collection.
             </summary>
            
             <param name="key">The key of the entry to remove.</param>
            
             <returns>
             true for success; otherwise, false.
             </returns>
            
        </member>
        <member name="M:Cube.Collections.OrderedDictionary`2.Clear">
            
             Clear
            
             <summary>
             Removes all elements from the OrderedDictionary(TKey, TValue)
             collection.
             </summary>
            
        </member>
        <member name="M:Cube.Collections.OrderedDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            
             CopyTo
            
             <summary>
             Copies the OrderedDictionary(TKey, TValue) elements to a
             one-dimensional array object at the specified index.
             </summary>
            
             <param name="dest">One-dimensional array object to copy to.</param>
             <param name="offset">Index in array at which copying begins.</param>
            
        </member>
        <member name="M:Cube.Collections.OrderedDictionary`2.TryGetValue(`0,`1@)">
            
             TryGetValue
            
             <summary>
             Gets the value associated with the specified key.
             </summary>
            
             <param name="key">Key of the value to get.</param>
             <param name="dest">
             When this method returns, contains the value associated with the
             specified key, if the key is found; otherwise, the default value
             for the type of the value parameter.
             </param>
            
             <returns>
             true if the OrderedDictionary(TKey, TValue) contains an element
             with the specified key; otherwise, false.
             </returns>
            
        </member>
        <member name="M:Cube.Collections.OrderedDictionary`2.GetEnumerator">
            
             GetEnumerator
            
             <summary>
             Returns an enumerator that iterates through a collection.
             </summary>
            
             <returns>
             Enumerator that can be used to iterate through the collection.
             </returns>
            
        </member>
        <member name="M:Cube.Collections.OrderedDictionary`2.Dispose(System.Boolean)">
            
             Dispose
            
             <summary>
             Releases the unmanaged resources used by the object and
             optionally releases the managed resources.
             </summary>
            
             <param name="disposing">
             true to release both managed and unmanaged resources;
             false to release only unmanaged resources.
             </param>
            
        </member>
        <member name="T:Cube.Collections.Subscription`1">
            
             Subscription
            
             <summary>
             Provides functionality to add or remove subscribers.
             </summary>
            
        </member>
        <member name="P:Cube.Collections.Subscription`1.Count">
            
             Count
            
             <summary>
             Gets the number of registered callbacks.
             </summary>
            
        </member>
        <member name="M:Cube.Collections.Subscription`1.Subscribe(`0)">
            
             Subscribe
            
             <summary>
             Add the specified subscriber to the subscription.
             </summary>
            
             <param name="subscriber">Subscriber object.</param>
            
             <returns>
             Object to remove the specified subscriber.
             </returns>
            
        </member>
        <member name="M:Cube.Collections.Subscription`1.GetEnumerator">
            
             GetEnumerator
            
             <summary>
             Returns an enumerator that iterates through a collection.
             </summary>
            
             <returns>
             Enumerator that can be used to iterate through the collection.
             </returns>
            
        </member>
        <member name="M:Cube.Collections.Subscription`1.Dispose(System.Boolean)">
            
             Dispose
            
             <summary>
             Releases the unmanaged resources used by the SubscriptionReader
             and optionally releases the managed resources.
             </summary>
            
             <param name="disposing">
             true to release both managed and unmanaged resources;
             false to release only unmanaged resources.
             </param>
            
        </member>
        <member name="T:Cube.DataContract.Format">
            
             Format
            
             <summary>
             Specifies formats that can be serialized and deserialized by the
             DataContract module.
             </summary>
            
        </member>
        <member name="F:Cube.DataContract.Format.Registry">
            <summary>Registry</summary>
        </member>
        <member name="F:Cube.DataContract.Format.Xml">
            <summary>XML</summary>
        </member>
        <member name="F:Cube.DataContract.Format.Json">
            <summary>JSON</summary>
        </member>
        <member name="T:Cube.DataContract.Formatter">
            
             Formatter
            
             <summary>
             Provides functionality to serialize and deserialize the DataContract
             objects.
             </summary>
            
        </member>
        <member name="P:Cube.DataContract.Formatter.DefaultKey">
            
             DefaultKey
            
             <summary>
             Gets or sets the default registry subkey when serializing or
             deserializing the registry.
             </summary>
            
             <remarks>
             If you do not explicitly specify a subkey when serializing or
             deserializing, this subkey will be used.
             </remarks>
            
        </member>
        <member name="M:Cube.DataContract.Formatter.Serialize``1(Cube.DataContract.Format,System.String,``0)">
            
             Serialize
            
             <summary>
             Serializes objects to the specified location.
             </summary>
            
             <param name="format">Serialization format.</param>
             <param name="dest">Saving location.</param>
             <param name="src">Object to be serialized.</param>
            
        </member>
        <member name="M:Cube.DataContract.Formatter.Serialize``1(Microsoft.Win32.RegistryKey,``0)">
            
             Serialize
            
             <summary>
             Serializes objects to the specified registry subkey.
             </summary>
            
             <param name="dest">Registry subkey</param>
             <param name="src">Object to be serialized.</param>
            
        </member>
        <member name="M:Cube.DataContract.Formatter.SerializeXml``1(System.IO.Stream,``0)">
            
             SerializeXml
            
             <summary>
             Serializes objects to the specified stream as XML format.
             </summary>
            
        </member>
        <member name="M:Cube.DataContract.Formatter.SerializeJson``1(System.IO.Stream,``0)">
            
             SerializeJson
            
             <summary>
             Serializes objects to the specified stream as JSON format.
             </summary>
            
        </member>
        <member name="M:Cube.DataContract.Formatter.Deserialize``1(Cube.DataContract.Format,System.String)">
            
             Deserialize
            
             <summary>
             Deserializes contents of the specified location.
             </summary>
            
             <param name="format">Serialization format.</param>
             <param name="src">Location to be loaded.</param>
            
             <returns>Deserialized object.</returns>
            
        </member>
        <member name="M:Cube.DataContract.Formatter.Deserialize``1(Microsoft.Win32.RegistryKey)">
            
             Deserialize
            
             <summary>
             Deserializes contents of the specified subkey.
             </summary>
            
             <param name="src">Registry subkey to be loaded.</param>
            
             <returns>Deserialized object.</returns>
            
        </member>
        <member name="T:Cube.DataContract.Internal.PropertyExtension">
            
             PropertyExtension
            
             <summary>
             Provides extended methods of the Type and PropertyInfo classes.
             </summary>
            
        </member>
        <member name="M:Cube.DataContract.Internal.PropertyExtension.Parse(System.Type,System.Object)">
            
             Parse
            
             <summary>
             Converts the specified value according to the specified type.
             </summary>
            
             <param name="src">Type of the converted object.</param>
             <param name="value">Object to be converted.</param>
            
             <returns>Converted object.</returns>
            
        </member>
        <member name="M:Cube.DataContract.Internal.PropertyExtension.IsObject(System.Type)">
            
             IsObject
            
             <summary>
             Determines whether the specified type is generic object type.
             </summary>
            
             <param name="src">Target type.</param>
            
             <returns>true for generic object type.</returns>
            
        </member>
        <member name="M:Cube.DataContract.Internal.PropertyExtension.IsGenericList(System.Type)">
            
             IsGenericList
            
             <summary>
             Determines whether the specified type is List(T) or IList(T).
             </summary>
            
             <param name="src">Target type.</param>
            
             <returns>true for generic list.</returns>
            
        </member>
        <member name="M:Cube.DataContract.Internal.PropertyExtension.GetPropertyType(System.Reflection.PropertyInfo)">
            
             GetPropertyType
            
             <summary>
             Gets the type of specified object.
             </summary>
            
             <param name="src">Property information.</param>
            
             <returns>Type object.</returns>
            
             <remarks>
             Returns the type of T if the specified object represents the
             Nullable(T) type.
             </remarks>
            
        </member>
        <member name="M:Cube.DataContract.Internal.PropertyExtension.GetDataMemberName(System.Reflection.PropertyInfo)">
            
             GetDataMemberName
            
             <summary>
             Gets the name of property that has the DataMember attribute.
             </summary>
            
             <param name="info">Property information.</param>
            
             <returns>Name of property.</returns>
            
        </member>
        <member name="T:Cube.DataContract.RegistryDeserializer">
            
             RegistryDeserializer
            
             <summary>
             Provides functionality to deserialize from the registry.
             </summary>
            
        </member>
        <member name="M:Cube.DataContract.RegistryDeserializer.Invoke``1(Microsoft.Win32.RegistryKey)">
            
             Invoke
            
             <summary>
             Invokes the deserialization from the specified registry key.
             </summary>
            
             <param name="src">Root registry key.</param>
            
             <returns>Deserialized object.</returns>
            
        </member>
        <member name="M:Cube.DataContract.RegistryDeserializer.Get(System.Type,Microsoft.Win32.RegistryKey)">
            
             Get
            
             <summary>
             Gets the object corresponding to the specified type and
             registry key.
             </summary>
            
        </member>
        <member name="M:Cube.DataContract.RegistryDeserializer.Get(System.Type,Microsoft.Win32.RegistryKey,System.String)">
            
             Get
            
             <summary>
             Gets the object corresponding to the specified type, registry
             key, and name.
             </summary>
            
        </member>
        <member name="M:Cube.DataContract.RegistryDeserializer.GetArray(System.Type,Microsoft.Win32.RegistryKey)">
            
             GetArray
            
             <summary>
             Gets the array object corresponding to the specified type and
             registry key.
             </summary>
            
        </member>
        <member name="M:Cube.DataContract.RegistryDeserializer.GetList(System.Type,Microsoft.Win32.RegistryKey)">
            
             GetList
            
             <summary>
             Gets the list object corresponding to the specified type and
             registry key.
             </summary>
            
        </member>
        <member name="M:Cube.DataContract.RegistryDeserializer.GetListCore(System.Type,Microsoft.Win32.RegistryKey)">
            
             GetListCore
            
             <summary>
             Gets the list object corresponding to the specified type and
             registry key.
             </summary>
            
        </member>
        <member name="M:Cube.DataContract.RegistryDeserializer.GetListElement(System.Type,Microsoft.Win32.RegistryKey)">
            
             GetListElement
            
             <summary>
             Gets the list object corresponding to the specified type and
             registry key.
             </summary>
            
        </member>
        <member name="M:Cube.DataContract.RegistryDeserializer.OpenGet(Microsoft.Win32.RegistryKey,System.String,System.Func{Microsoft.Win32.RegistryKey,System.Object})">
            
             OpenGet
            
             <summary>
             Opens the registry from the specified registry key and name,
             and invokes the specified action.
             </summary>
            
        </member>
        <member name="T:Cube.DataContract.RegistrySerializer">
            
             RegistrySserializer
            
             <summary>
             Provides functionality to serialize to the registry.
             </summary>
            
        </member>
        <member name="M:Cube.DataContract.RegistrySerializer.Invoke``1(Microsoft.Win32.RegistryKey,``0)">
            
             Invoke
            
             <summary>
             Invokes the serialization to the specified registry key.
             </summary>
            
             <param name="dest">Root registry key.</param>
             <param name="src">Object to be serialized.</param>
            
        </member>
        <member name="M:Cube.DataContract.RegistrySerializer.Set(System.Type,Microsoft.Win32.RegistryKey,System.Object)">
            
             Set
            
             <summary>
             Sets the specified object to the specified registry key.
             </summary>
            
        </member>
        <member name="M:Cube.DataContract.RegistrySerializer.Set(System.Type,Microsoft.Win32.RegistryKey,System.String,System.Object)">
            
             Set
            
             <summary>
             Sets the specified object to the specified registry key.
             </summary>
            
        </member>
        <member name="M:Cube.DataContract.RegistrySerializer.SetArray(System.Type,Microsoft.Win32.RegistryKey,System.Array)">
            
             SetArray
            
             <summary>
             Sets the specified array object to the specified registry key.
             </summary>
            
        </member>
        <member name="M:Cube.DataContract.RegistrySerializer.SetList(System.Type,Microsoft.Win32.RegistryKey,System.Collections.IList)">
            
             SetList
            
             <summary>
             Sets the specified list object to the specified registry key.
             </summary>
            
        </member>
        <member name="M:Cube.DataContract.RegistrySerializer.SetListElement(System.Type,Microsoft.Win32.RegistryKey,System.Object)">
            
             SetListElement
            
             <summary>
             Sets the specified list object to the specified registry key.
             </summary>
            
        </member>
        <member name="M:Cube.DataContract.RegistrySerializer.Create(Microsoft.Win32.RegistryKey,System.String,System.Action{Microsoft.Win32.RegistryKey})">
            
             Create
            
             <summary>
             Creates a new registry key with the specified registry key
             and name, and invokes the specified action.
             </summary>
            
        </member>
        <member name="M:Cube.DataContract.RegistrySerializer.Digit(System.Int32)">
            
             Digit
            
             <summary>
             Gets the digit number of the specified value.
             </summary>
            
        </member>
        <member name="T:Cube.DataContract.SerializableBase">
            
             SerializableBase
            
             <summary>
             Provides an implementation of the INotifyPropertyChanged interface
             with the Serializable and DataContract attributes.
             </summary>
            
        </member>
        <member name="M:Cube.DataContract.SerializableBase.#ctor">
            
             SerializableBase
            
             <summary>
             Initializes a new instance of the ObservableBase class.
             </summary>
            
        </member>
        <member name="M:Cube.DataContract.SerializableBase.#ctor(Cube.Dispatcher)">
            
             SerializableBase
            
             <summary>
             Initializes a new instance of the ObservableBase class with
             the specified dispatcher.
             </summary>
            
             <param name="dispatcher">Dispatcher object.</param>
            
        </member>
        <member name="P:Cube.DataContract.SerializableBase.Dispatcher">
            
             Dispatcher
            
             <summary>
             Gets or sets the dispatcher object.
             </summary>
            
        </member>
        <member name="E:Cube.DataContract.SerializableBase.PropertyChanged">
            
             PropertyChanged
            
             <summary>
             Occurs when a property is changed.
             </summary>
            
        </member>
        <member name="M:Cube.DataContract.SerializableBase.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            
             OnPropertyChanged
            
             <summary>
             Raises the PropertyChanged event with the provided arguments.
             </summary>
            
             <param name="e">Arguments of the event being raised.</param>
            
        </member>
        <member name="M:Cube.DataContract.SerializableBase.Refresh(System.String,System.String[])">
            
             Refresh
            
             <summary>
             Notifies the update of the specified properties by raising
             the PropertyChanged event.
             </summary>
            
             <param name="name">Property name.</param>
             <param name="more">More property names.</param>
            
        </member>
        <member name="M:Cube.DataContract.SerializableBase.Get``1(System.Func{``0},System.String)">
            
             Get
            
             <summary>
             Gets the value of the specified property name. The specified
             property will be initialized with the specified creator object
             as needed.
             </summary>
            
             <param name="creator">Function to create an initial value.</param>
             <param name="name">Name of the property.</param>
            
             <returns>Value of the property.</returns>
            
        </member>
        <member name="M:Cube.DataContract.SerializableBase.Get``1(System.String)">
            
             Get
            
             <summary>
             Gets the value of the specified property name.
             </summary>
            
             <param name="name">Name of the property.</param>
            
             <returns>Value of the property.</returns>
            
        </member>
        <member name="M:Cube.DataContract.SerializableBase.Set``1(``0,System.String)">
            
             Set
            
             <summary>
             Sets the specified value to the inner field of the specified
             name if they are not equal.
             </summary>
            
             <param name="value">Value being set.</param>
             <param name="name">Name of the property.</param>
            
             <returns>True for done; false for cancel.</returns>
            
        </member>
        <member name="M:Cube.DataContract.SerializableBase.Set``1(``0,System.Collections.Generic.IEqualityComparer{``0},System.String)">
            
             Set
            
             <summary>
             Sets the specified value to the inner field of the specified
             name if they are not equal.
             </summary>
            
             <param name="value">Value being set.</param>
             <param name="compare">Function to compare.</param>
             <param name="name">Name of the property.</param>
            
             <returns>True for done; false for cancel.</returns>
            
        </member>
        <member name="M:Cube.DataContract.SerializableBase.Set``1(``0@,``0,System.String)">
            
             Set
            
             <summary>
             Sets the specified value to the specified field if they are
             not equal.
             </summary>
            
             <param name="field">Reference to the target field.</param>
             <param name="value">Value being set.</param>
             <param name="name">Name of the property.</param>
            
             <returns>True for done; false for cancel.</returns>
            
        </member>
        <member name="M:Cube.DataContract.SerializableBase.Set``1(``0@,``0,System.Collections.Generic.IEqualityComparer{``0},System.String)">
            
             Set
            
             <summary>
             Set the specified value in the specified field if they are not
             equal.
             </summary>
            
             <param name="field">Reference to the target field.</param>
             <param name="value">Value being set.</param>
             <param name="compare">Function to compare.</param>
             <param name="name">Name of the property.</param>
            
             <returns>True for done; false for cancel.</returns>
            
        </member>
        <member name="M:Cube.DataContract.SerializableBase.OnDeserializing(System.Runtime.Serialization.StreamingContext)">
            
             OnDeserializing
            
             <summary>
             Occurs before deserializing.
             </summary>
            
        </member>
        <member name="M:Cube.DataContract.SerializableBase.Reset(Cube.Dispatcher)">
            
             Reset
            
             <summary>
             Resets properties and fields.
             </summary>
            
        </member>
        <member name="T:Cube.Dispatcher">
            
             Dispatcher
            
             <summary>
             Provides functionality to invoke the provided action.
             </summary>
            
        </member>
        <member name="P:Cube.Dispatcher.Vanilla">
            
             Vanilla
            
             <summary>
             Gets the dispatcher that invokes the provided action directly.
             </summary>
            
        </member>
        <member name="M:Cube.Dispatcher.Invoke(System.Action)">
            
             Invoke
            
             <summary>
             Invokes the specified action.
             </summary>
            
             <param name="action">Invoked action.</param>
            
        </member>
        <member name="T:Cube.ContextDispatcher">
            
             ContextDispatcher
            
             <summary>
             Provides functionality to invoke the provided action with a
             SynchronizationContext object.
             </summary>
            
        </member>
        <member name="M:Cube.ContextDispatcher.#ctor(System.Boolean)">
            
             ContextDispatcher
            
             <summary>
             Initializes a new instance of the ContextDispatcher class with
             the specified arguments.
             </summary>
            
             <param name="synchronous">
             Value indicating to invoke the provided action with the
             synchronous method.
             </param>
            
             <exception cref="T:System.ArgumentNullException">
             SynchronizationContext.Current is null.
             </exception>
            
        </member>
        <member name="M:Cube.ContextDispatcher.#ctor(System.Threading.SynchronizationContext,System.Boolean)">
            
             ContextDispatcher
            
             <summary>
             Initializes a new instance of the ContextDispatcher class with
             the specified arguments.
             </summary>
            
             <param name="context">Synchronization context.</param>
             <param name="synchronous">
             Value indicating to invoke the provided action with the
             synchronous method.
             </param>
            
             <exception cref="T:System.ArgumentNullException">
             Specified SynchronizationContext object is null.
             </exception>
            
        </member>
        <member name="P:Cube.ContextDispatcher.Synchronous">
            
             Synchronous
            
             <summary>
             Gets or sets the value indicating whether the event is fired
             as synchronously.
             </summary>
            
             <remarks>
             Uses the Send method if the property is set to true;
             otherwise uses the Post method.
             </remarks>
            
        </member>
        <member name="P:Cube.ContextDispatcher.Context">
            
             Context
            
             <summary>
             Gets the synchronization context.
             </summary>
            
        </member>
        <member name="M:Cube.ContextDispatcher.Invoke(System.Action)">
            
             Invoke
            
             <summary>
             Invokes the specified action with the Synchronization context.
             </summary>
            
             <param name="action">Invoked action.</param>
            
        </member>
        <member name="T:Cube.VanillaDispatcher">
            
             VanillaDispatcher
            
             <summary>
             Provides functionality to invoke the provided action directly.
             </summary>
            
        </member>
        <member name="M:Cube.VanillaDispatcher.Invoke(System.Action)">
            
             Invoke
            
             <summary>
             Invokes the specified action.
             </summary>
            
             <param name="action">Invoked action.</param>
            
        </member>
        <member name="T:Cube.Disposable">
            
             Disposable
            
             <summary>
             Provides functionality to create a IDisposable object.
             </summary>
            
        </member>
        <member name="M:Cube.Disposable.Create(System.Action)">
            
             Create
            
             <summary>
             Creates a IDisposable object from the specified action.
             </summary>
            
             <param name="dispose">Invoke when disposed.</param>
            
             <returns>IDisposable object.</returns>
            
        </member>
        <member name="T:Cube.Disposable.DisposableCore">
            
             DisposableCore
            
             <summary>
             Represents an implementation to execute the provided action
             as an IDisposable manner.
             </summary>
            
        </member>
        <member name="T:Cube.DisposableBase">
            
             DisposableBase
            
             <summary>
             Represents an implementation of the IDisposable interface.
             </summary>
            
        </member>
        <member name="M:Cube.DisposableBase.#ctor">
            
             DisposableBase
            
             <summary>
             Creates a new instance of the DisposableBase class.
             </summary>
            
        </member>
        <member name="P:Cube.DisposableBase.Disposed">
            
             Disposed
            
             <summary>
             Gets the value indicating whether the object is disposed.
             </summary>
            
        </member>
        <member name="M:Cube.DisposableBase.Finalize">
            
             ~DisposableBase
            
             <summary>
             Finalizes the DisposableBase.
             </summary>
            
        </member>
        <member name="M:Cube.DisposableBase.Dispose">
            
             Dispose
            
             <summary>
             Releases all resources used by the object.
             </summary>
            
        </member>
        <member name="M:Cube.DisposableBase.Dispose(System.Boolean)">
            
             Dispose
            
             <summary>
             Releases the unmanaged resources used by the object and
             optionally releases the managed resources.
             </summary>
            
             <param name="disposing">
             true to release both managed and unmanaged resources;
             false to release only unmanaged resources.
             </param>
            
        </member>
        <member name="T:Cube.DisposableContainer">
            
             DisposableContainer
            
             <summary>
             Provides functionality to invoke the provided IDisposable objects
             at once.
             </summary>
            
        </member>
        <member name="M:Cube.DisposableContainer.#ctor">
            
             DisposableContainer
            
             <summary>
             Initializes a new instance of the DisposableContainer class.
             </summary>
            
        </member>
        <member name="M:Cube.DisposableContainer.#ctor(System.IDisposable)">
            
             DisposableContainer
            
             <summary>
             Initializes a new instance of the DisposableContainer class with
             the specified IDisposable object.
             </summary>
            
             <param name="src">IDisposable object.</param>
            
        </member>
        <member name="M:Cube.DisposableContainer.#ctor(System.IDisposable,System.IDisposable[])">
            
             DisposableContainer
            
             <summary>
             Initializes a new instance of the DisposableContainer class with
             the specified one or more IDisposable objects.
             </summary>
            
             <param name="src">IDisposable object.</param>
             <param name="more">IDisposable objects.</param>
            
        </member>
        <member name="M:Cube.DisposableContainer.Contains(System.IDisposable)">
            
             Contains
            
             <summary>
             Determines whether the specified object is included.
             </summary>
            
             <param name="src">IDisposable objects.</param>
            
             <returns>true for included.</returns>
            
        </member>
        <member name="M:Cube.DisposableContainer.Add(System.IDisposable)">
            
             Add
            
             <summary>
             Adds the specified disposable object.
             </summary>
            
             <param name="src">IDisposable objects.</param>
            
             <remarks>
             If the object has already been disposed when called, the Dispose
             method of the specified object will be invoked immediately.
             </remarks>
            
        </member>
        <member name="M:Cube.DisposableContainer.Add(System.IDisposable,System.IDisposable[])">
            
             Add
            
             <summary>
             Adds the specified one or more disposable objects.
             </summary>
            
             <param name="src">IDisposable objects.</param>
             <param name="more">IDisposable objects.</param>
            
             <remarks>
             If the object has already been disposed when called, the Dispose
             method of the specified object will be invoked immediately.
             </remarks>
            
        </member>
        <member name="M:Cube.DisposableContainer.Add(System.Action)">
            
             Add
            
             <summary>
             Converts the specified action to an IDisposable object and adds it.
             </summary>
            
             <param name="action">
             Action to be invoked when disposing.
             </param>
            
        </member>
        <member name="M:Cube.DisposableContainer.Dispose(System.Boolean)">
            
             Dispose
            
             <summary>
             Releases the all IDisposable objects. The class will always
             invoke the dispose operation, regardless of the disposing
             parameter.
             </summary>
            
             <param name="disposing">
             Note that the class ignores the parameter.
             </param>
            
        </member>
        <member name="T:Cube.DisposableExtension">
            
             DisposableExtension
            
             <summary>
             Provides extended methods of the DisposableBase and inherited
             classes.
             </summary>
            
        </member>
        <member name="M:Cube.DisposableExtension.Hook``1(Cube.DisposableContainer,``0)">
            
             Hook
            
             <summary>
             Adds the specified object and returns it.
             </summary>
            
             <param name="src">Source container.</param>
             <param name="obj">Object to be added.</param>
            
             <returns>Same as the specified object.</returns>
            
        </member>
        <member name="T:Cube.DisposableProxy">
            
             DisposableProxy
            
             <summary>
             Provides functionality to invoke the provided IDisposable object
             when disposing.
             </summary>
            
        </member>
        <member name="M:Cube.DisposableProxy.#ctor(System.Func{System.IDisposable})">
            
             DisposableProxy
            
             <summary>
             Initializes a new instance of the DisposableProxy with the
             specified arguments.
             </summary>
            
             <param name="func">
             Function to create an IDisposable object.
             </param>
            
        </member>
        <member name="M:Cube.DisposableProxy.#ctor(System.IDisposable)">
            
             DisposableProxy
            
             <summary>
             Initializes a new instance of the DisposableProxy with the
             specified arguments.
             </summary>
            
             <param name="disposable">IDisposable object.</param>
            
        </member>
        <member name="M:Cube.DisposableProxy.Dispose(System.Boolean)">
            
             Dispose
            
             <summary>
             Releases the unmanaged resources used by the object and
             optionally releases the managed resources.
             </summary>
            
             <param name="disposing">
             true to release both managed and unmanaged resources;
             false to release only unmanaged resources.
             </param>
            
        </member>
        <member name="T:Cube.CollectionEventArgs">
            
             CollectionEventArgs
            
             <summary>
             Provides methods to create an instance of the CollectionEventArgs(T)
             or CollectionEventArgs(T) classes.
             </summary>
            
        </member>
        <member name="M:Cube.CollectionEventArgs.Create``1(System.Collections.Generic.IEnumerable{``0})">
            
             Create
            
             <summary>
             Creates a new instance of the CollectionEventArgs(T) class
             with the specified value.
             </summary>
            
             <param name="value">Value to use for the event.</param>
            
        </member>
        <member name="M:Cube.CollectionEventArgs.Create``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            
             Create
            
             <summary>
             Creates a new instance of the CollectionEventArgs(T) class
             with the specified arguments.
             </summary>
            
             <param name="value">Value to use for the event.</param>
             <param name="cancel">
             true to cancel the event; otherwise, false.
             </param>
            
        </member>
        <member name="T:Cube.CollectionEventArgs`1">
            
             CollectionEventArgs(T)
            
             <summary>
             Provides a value of type IEnumerable(T) to use for events.
             </summary>
            
        </member>
        <member name="M:Cube.CollectionEventArgs`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            
             CollectionEventArgs(T)
            
             <summary>
             Creates a new instance of the CollectionEventArgs class with
             the specified value.
             </summary>
            
             <param name="value">Value to use for the event.</param>
            
        </member>
        <member name="T:Cube.CollectionCancelEventArgs`1">
            
             CollectionCancelEventArgs(T)
            
             <summary>
             Provides data for a cancelable event with a value of type
             IEnumerable(T).
             </summary>
            
        </member>
        <member name="M:Cube.CollectionCancelEventArgs`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            
             CollectionCancelEventArgs
            
             <summary>
             Initializes a new instance of the CollectionCancelEventArgs
             class with the specified value. The Cancel property is set
             to false.
             </summary>
            
             <param name="value">Value to use for the event.</param>
            
        </member>
        <member name="M:Cube.CollectionCancelEventArgs`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            
             CollectionCancelEventArgs
            
             <summary>
             Initializes a new instance of the CollectionCancelEventArgs
             class with the specified arguments.
             </summary>
            
             <param name="value">Value to use for the event.</param>
             <param name="cancel">
             true to cancel the event; otherwise, false.
             </param>
            
        </member>
        <member name="T:Cube.CollectionEventHandler`1">
            
             CollectionEventHandler(T)
            
             <summary>
             Represents the method to invoke an event.
             </summary>
            
        </member>
        <member name="T:Cube.CollectionCancelEventHandler`1">
            
             CollectionCancelEventHandler(T)
            
             <summary>
             Represents the method to invoke an event.
             </summary>
            
        </member>
        <member name="T:Cube.EventBehavior">
            
             EventBehavior
            
             <summary>
             Provides functionality to wrap the specified event as
             Subscribe/Dispose pattern.
             </summary>
            
        </member>
        <member name="M:Cube.EventBehavior.#ctor(System.Object,System.String,System.Action)">
            
             EventBehavior
            
             <summary>
             Creates a new instance of the EventBehavior class
             with the specified arguments.
             </summary>
            
             <param name="src">Source object.</param>
             <param name="name">Event name to wrap.</param>
             <param name="action">
             Action when the specified event is fired.
             </param>
            
        </member>
        <member name="M:Cube.EventBehavior.#ctor(System.Object,System.String,System.Delegate)">
            
             EventBehavior
            
             <summary>
             Creates a new instance of the EventBehavior class
             with the specified arguments.
             </summary>
            
             <param name="src">Source object.</param>
             <param name="name">Event name to wrap.</param>
             <param name="handler">
             Handler when the specified event is fired.
             </param>
            
        </member>
        <member name="M:Cube.EventBehavior.Dispose(System.Boolean)">
            
             Dispose
            
             <summary>
             Releases the unmanaged resources used by the object and
             optionally releases the managed resources.
             </summary>
            
             <param name="disposing">
             true to release both managed and unmanaged resources;
             false to release only unmanaged resources.
             </param>
            
        </member>
        <member name="T:Cube.KeyValueEventArgs">
            
             KeyValueEventArgs
            
             <summary>
             Provides methods to create a new instance of the
             KeyValueEventArgs(T, U) or KeyValueCancelEventArgs(T, U) classes.
             </summary>
            
        </member>
        <member name="M:Cube.KeyValueEventArgs.Create``2(``0,``1)">
            
             Create
            
             <summary>
             Creates a new instance of the KeyValueEventArgs(T, U) class
             with the specified key and value.
             </summary>
            
             <param name="key">Key to use for the event.</param>
             <param name="value">Value to use for the event.</param>
            
        </member>
        <member name="M:Cube.KeyValueEventArgs.Create``2(``0,``1,System.Boolean)">
            
             Create
            
             <summary>
             Creates a new instance of the KeyValueCancelEventArgs(T, U)
             class with the specified arguments.
             </summary>
            
             <param name="key">Key to use for the event.</param>
             <param name="value">Value to use for the event.</param>
             <param name="cancel">
             true to cancel the event; otherwise, false.
             </param>
            
        </member>
        <member name="T:Cube.KeyValueEventArgs`2">
            
             KeyValueEventArgs(T, U)
            
             <summary>
             Provides Key-Value data to use for events.
             </summary>
            
        </member>
        <member name="M:Cube.KeyValueEventArgs`2.#ctor(`0,`1)">
            
             KeyValueEventArgs
            
             <summary>
             Creates a new instance of the KeyValueEventArgs class with the
             specified key and value.
             </summary>
            
             <param name="key">Key to use for the event.</param>
             <param name="value">Value to use for the event.</param>
            
        </member>
        <member name="P:Cube.KeyValueEventArgs`2.Key">
            
             Key
            
             <summary>
             Gets a key to use for the event.
             </summary>
            
        </member>
        <member name="T:Cube.KeyValueCancelEventArgs`2">
            
             KeyValueCancelEventArgs(T, U)
            
             <summary>
             Provides data for a cancelable event with Key-Value data.
             </summary>
            
        </member>
        <member name="M:Cube.KeyValueCancelEventArgs`2.#ctor(`0,`1)">
            
             KeyValueCancelEventArgs
            
             <summary>
             Initializes a new instance of the KeyValueCancelEventArgs class
             with the specified key and value. The Cancel property is set
             to false.
             </summary>
            
             <param name="key">Key to use for the event.</param>
             <param name="value">Value to use for the event.</param>
            
        </member>
        <member name="M:Cube.KeyValueCancelEventArgs`2.#ctor(`0,`1,System.Boolean)">
            
             KeyValueCancelEventArgs
            
             <summary>
             Initializes a new instance of the KeyValueCancelEventArgs class
             with the specified arguments.
             </summary>
            
             <param name="key">Key to use for the event.</param>
             <param name="value">Value to use for the event.</param>
             <param name="cancel">
             true to cancel the event; otherwise, false.
             </param>
            
        </member>
        <member name="P:Cube.KeyValueCancelEventArgs`2.Key">
            
             Key
            
             <summary>
             Gets a key to use for the event.
             </summary>
            
        </member>
        <member name="T:Cube.KeyValueEventHandler`2">
            
             KeyValueEventHandler(T, U)
            
             <summary>
             Represents the method to invoke an event.
             </summary>
            
        </member>
        <member name="T:Cube.KeyValueCanelEventHandler`2">
            
             KeyValueCanelEventHandler(T, U)
            
             <summary>
             Represents the method to invoke an event.
             </summary>
            
        </member>
        <member name="T:Cube.ValueEventArgs">
            
             ValueEventArgs
            
             <summary>
             Provides methods to create a new instance of the ValueEventArgs(T),
             ValueCancelEventArgs(T), or ValueChangedEventArgs(T) classes.
             </summary>
            
        </member>
        <member name="M:Cube.ValueEventArgs.Create``1(``0)">
            
             Create
            
             <summary>
             Creates a new instance of the ValueEventArgs(T) class with the
             specified value.
             </summary>
            
             <param name="value">Value to use for the event.</param>
            
        </member>
        <member name="M:Cube.ValueEventArgs.Create``1(``0,System.Boolean)">
            
             Create
            
             <summary>
             Creates a new instance of the ValueCancelEventArgs(T) class
             with the specified arguments.
             </summary>
            
             <param name="value">Value to use for the event.</param>
             <param name="cancel">
             true to cancel the event; otherwise, false.
             </param>
            
        </member>
        <member name="M:Cube.ValueEventArgs.Create``1(``0,``0)">
            
             Create
            
             <summary>
             Creates a new instance of the ValueChangedEventArgs(T) class
             with the specified arguments.
             </summary>
            
             <param name="oldvalue">Value before changed.</param>
             <param name="newvalue">Value after changed.</param>
            
             <remarks>
             bool 型の値を指定すると ValueCancelEventArgs(T) のオブジェクトが
             生成される場合があります。
             </remarks>
            
        </member>
        <member name="T:Cube.ValueEventArgs`1">
            
             ValueEventArgs(T)
            
             <summary>
             Provides a value of type T to use for events.
             </summary>
            
        </member>
        <member name="M:Cube.ValueEventArgs`1.#ctor(`0)">
            
             ValueEventArgs
            
             <summary>
             Initializes a new instance of the ValueEventArgs class with
             the specified value.
             </summary>
            
             <param name="value">Value to use for the event.</param>
            
        </member>
        <member name="P:Cube.ValueEventArgs`1.Value">
            
             Value
            
             <summary>
             Gets a value to use for the event.
             </summary>
            
        </member>
        <member name="T:Cube.ValueCancelEventArgs`1">
            
             ValueCancelEventArgs(T)
            
             <summary>
             Provides data for a cancelable event with a value of type T.
             </summary>
            
        </member>
        <member name="M:Cube.ValueCancelEventArgs`1.#ctor(`0)">
            
             ValueCancelEventArgs
            
             <summary>
             Initializes a new instance of the ValueCancelEventArgs class
             with the specified value. The Cancel property is set to
             false.
             </summary>
            
             <param name="value">Value to use for the event.</param>
            
        </member>
        <member name="M:Cube.ValueCancelEventArgs`1.#ctor(`0,System.Boolean)">
            
             ValueCancelEventArgs
            
             <summary>
             Initializes a new instance of the ValueCancelEventArgs class
             with the specified arguments.
             </summary>
            
             <param name="value">Value to use for the event.</param>
             <param name="cancel">
             true to cancel the event; otherwise, false.
             </param>
            
        </member>
        <member name="P:Cube.ValueCancelEventArgs`1.Value">
            
             Value
            
             <summary>
             Gets a value to use for the event.
             </summary>
            
        </member>
        <member name="T:Cube.ValueChangedEventArgs`1">
            
             ValueChangedEventArgs(T)
            
             <summary>
             Provides values that represent before and after changing for user
             events.
             </summary>
            
        </member>
        <member name="M:Cube.ValueChangedEventArgs`1.#ctor(`0,`0)">
            
             ValueChangedEventArgs(T)
            
             <summary>
             Initializes a new instance of the ValueChangedEventArgs class
             with the specified arguments.
             </summary>
            
             <param name="oldvalue">Value before changed.</param>
             <param name="newvalue">Value after changed.</param>
            
        </member>
        <member name="P:Cube.ValueChangedEventArgs`1.OldValue">
            
             OldValue
            
             <summary>
             Gets a value before changed by the event.
             </summary>
            
        </member>
        <member name="P:Cube.ValueChangedEventArgs`1.NewValue">
            
             NewValue
            
             <summary>
             Gets a value after changed by the event.
             </summary>
            
        </member>
        <member name="T:Cube.ValueEventHandler`1">
            
             ValueEventHandler(T)
            
             <summary>
             Represents the method to invoke an event.
             </summary>
            
        </member>
        <member name="T:Cube.ValueCancelEventHandler`1">
            
             ValueCancelEventHandler(T)
            
             <summary>
             Represents the method to invoke an event.
             </summary>
            
        </member>
        <member name="T:Cube.ValueChangedEventHandler`1">
            
             ValueChangedEventHandler(T)
            
             <summary>
             Represents the method to invoke an event.
             </summary>
            
        </member>
        <member name="T:Cube.FileSystem.Entity">
            
             Entity
            
             <summary>
             Represents the file or directory information.
             </summary>
            
        </member>
        <member name="M:Cube.FileSystem.Entity.#ctor(Cube.FileSystem.Entity)">
            
             Entity
            
             <summary>
             Creates a new instance of the Entity class with the specified
             source object.
             </summary>
            
             <param name="src">Source object.</param>
            
        </member>
        <member name="M:Cube.FileSystem.Entity.#ctor(Cube.FileSystem.EntitySource)">
            
             Entity
            
             <summary>
             Creates a new instance of the Entity class with the specified
             source object.
             </summary>
            
             <param name="src">Source object.</param>
            
        </member>
        <member name="M:Cube.FileSystem.Entity.#ctor(Cube.FileSystem.EntitySource,System.Boolean)">
            
             Entity
            
             <summary>
             Creates a new instance of the Entity class with the specified
             arguments.
             </summary>
            
             <param name="src">Source object.</param>
             <param name="dispose">
             Value indicating whether to dispose the specified src object
             after initialization.
             </param>
            
        </member>
        <member name="P:Cube.FileSystem.Entity.RawName">
            
             RawName
            
             <summary>
             Gets the original path.
             </summary>
            
        </member>
        <member name="P:Cube.FileSystem.Entity.Exists">
            
             Exists
            
             <summary>
             Gets the value indicating whether the Source exists.
             </summary>
            
        </member>
        <member name="P:Cube.FileSystem.Entity.IsDirectory">
            
             IsDirectory
            
             <summary>
             Gets a value indicating whether the provided path is a directory.
             </summary>
            
        </member>
        <member name="P:Cube.FileSystem.Entity.Name">
            
             Name
            
             <summary>
             Gets the filename.
             </summary>
            
        </member>
        <member name="P:Cube.FileSystem.Entity.BaseName">
            
             BaseName
            
             <summary>
             Gets the filename without extension.
             </summary>
            
        </member>
        <member name="P:Cube.FileSystem.Entity.Extension">
            
             Extension
            
             <summary>
             Gets the extension part of the filename.
             </summary>
            
        </member>
        <member name="P:Cube.FileSystem.Entity.FullName">
            
             FullName
            
             <summary>
             Gets the full path.
             </summary>
            
        </member>
        <member name="P:Cube.FileSystem.Entity.DirectoryName">
            
             DirectoryName
            
             <summary>
             Gets the directory name.
             </summary>
            
        </member>
        <member name="P:Cube.FileSystem.Entity.Length">
            
             Length
            
             <summary>
             Gets the file-size.
             </summary>
            
        </member>
        <member name="P:Cube.FileSystem.Entity.Attributes">
            
             Attributes
            
             <summary>
             Gets the attributes of the file or directory.
             </summary>
            
        </member>
        <member name="P:Cube.FileSystem.Entity.CreationTime">
            
             CreationTime
            
             <summary>
             Gets the creation time of the file or directory.
             </summary>
            
        </member>
        <member name="P:Cube.FileSystem.Entity.LastWriteTime">
            
             LastWriteTime
            
             <summary>
             Gets the last written time of the file or directory.
             </summary>
            
        </member>
        <member name="P:Cube.FileSystem.Entity.LastAccessTime">
            
             LastAccessTime
            
             <summary>
             Gets the last accessed time of the file or directory.
             </summary>
            
        </member>
        <member name="T:Cube.FileSystem.EntitySource">
            
             EntitySource
            
             <summary>
             Represents the file or directory information that is editable.
             </summary>
            
        </member>
        <member name="M:Cube.FileSystem.EntitySource.#ctor(System.String)">
            
             EntitySource
            
             <summary>
             Initializes a new instance of the EntitySource class with the
             specified path.
             </summary>
            
             <param name="src">Path of the file or directory.</param>
            
        </member>
        <member name="M:Cube.FileSystem.EntitySource.#ctor(System.String,System.Boolean)">
            
             EntitySource
            
             <summary>
             Initializes a new instance of the EntitySource class with the
             specified arguments.
             </summary>
            
             <param name="src">Path of the file or directory.</param>
             <param name="refresh">
             Value indicating whether to invoke the Refresh method.
             </param>
            
        </member>
        <member name="P:Cube.FileSystem.EntitySource.RawName">
            
             RawName
            
             <summary>
             Gets the original path.
             </summary>
            
        </member>
        <member name="P:Cube.FileSystem.EntitySource.Exists">
            
             Exists
            
             <summary>
             Gets or sets the value indicating whether the Source exists.
             </summary>
            
        </member>
        <member name="P:Cube.FileSystem.EntitySource.IsDirectory">
            
             IsDirectory
            
             <summary>
             Gets or sets the value indicating whether the Source is
             directory.
             </summary>
            
        </member>
        <member name="P:Cube.FileSystem.EntitySource.Name">
            
             Name
            
             <summary>
             Gets or sets the filename.
             </summary>
            
        </member>
        <member name="P:Cube.FileSystem.EntitySource.BaseName">
            
             BaseName
            
             <summary>
             Gets or sets the filename without extension.
             </summary>
            
        </member>
        <member name="P:Cube.FileSystem.EntitySource.Extension">
            
             Extension
            
             <summary>
             Gets or sets the extension part of the filename.
             </summary>
            
        </member>
        <member name="P:Cube.FileSystem.EntitySource.FullName">
            
             FullName
            
             <summary>
             Gets or sets the full path.
             </summary>
            
        </member>
        <member name="P:Cube.FileSystem.EntitySource.DirectoryName">
            
             DirectoryName
            
             <summary>
             Gets or sets the directory name.
             </summary>
            
        </member>
        <member name="P:Cube.FileSystem.EntitySource.Length">
            
             Length
            
             <summary>
             Gets or sets the file-size.
             </summary>
            
        </member>
        <member name="P:Cube.FileSystem.EntitySource.Attributes">
            
             Attributes
            
             <summary>
             Gets or sets the attributes of the file or directory.
             </summary>
            
        </member>
        <member name="P:Cube.FileSystem.EntitySource.CreationTime">
            
             CreationTime
            
             <summary>
             Gets or sets the creation time of the file or directory.
             </summary>
            
        </member>
        <member name="P:Cube.FileSystem.EntitySource.LastWriteTime">
            
             LastWriteTime
            
             <summary>
             Gets or sets the last written time of the file or directory.
             </summary>
            
        </member>
        <member name="P:Cube.FileSystem.EntitySource.LastAccessTime">
            
             LastAccessTime
            
             <summary>
             Gets or sets the last accessed time of the file or directory.
             </summary>
            
        </member>
        <member name="M:Cube.FileSystem.EntitySource.Refresh">
            
             Refresh
            
             <summary>
             Refreshes the file or directory information.
             </summary>
            
        </member>
        <member name="M:Cube.FileSystem.EntitySource.OnRefresh">
            
             OnRefresh
            
             <summary>
             Refreshes the file or directory information.
             </summary>
            
        </member>
        <member name="M:Cube.FileSystem.EntitySource.Dispose(System.Boolean)">
            
             Dispose
            
             <summary>
             Releases the unmanaged resources used by the object and
             optionally releases the managed resources.
             </summary>
            
             <param name="disposing">
             true to release both managed and unmanaged resources;
             false to release only unmanaged resources.
             </param>
            
        </member>
        <member name="T:Cube.FileSystem.Io">
            
             Io
            
             <summary>
             Provides functionality to do something to a path, file, or directory.
             </summary>
            
        </member>
        <member name="M:Cube.FileSystem.Io.Configure(Cube.FileSystem.IoController)">
            
             Configure
            
             <summary>
             Sets the specified object as the controller of the class.
             </summary>
            
             <param name="src">I/O controller.</param>
            
        </member>
        <member name="M:Cube.FileSystem.Io.Exists(System.String)">
            
             Exists
            
             <summary>
             Determines if the specified file or directory exists.
             </summary>
            
             <param name="path">Path to check.</param>
            
             <returns>true for exists.</returns>
            
        </member>
        <member name="M:Cube.FileSystem.Io.Get(System.String)">
            
             Get
            
             <summary>
             Gets the Entity object from the specified path.
             </summary>
            
             <param name="path">Target path.</param>
            
             <returns>Entity object.</returns>
            
        </member>
        <member name="M:Cube.FileSystem.Io.GetFiles(System.String,System.String,System.IO.SearchOption)">
            
             GetFiles
            
             <summary>
             Returns the names of files (including their paths) that
             match the specified search pattern in the specified directory,
             using a value to determine whether to search subdirectories.
             </summary>
            
             <param name="path">
             The relative or absolute path to the directory to search.
             This string is not case-sensitive.
             </param>
            
             <param name="pattern">
             The search string to match against the names of subdirectories
             in path. This parameter can contain a combination of valid
             literal and wildcard characters, but doesn't support regular
             expressions.
             </param>
            
             <param name="option">
             One of the enumeration values that specifies whether the
             search operation should include all subdirectories or only
             the current directory.
             </param>
            
             <returns>
             An array of the full names (including paths) for the files
             in the specified directory that match the specified search
             pattern and option, or an empty array if no files are found.
             </returns>
            
        </member>
        <member name="M:Cube.FileSystem.Io.GetDirectories(System.String,System.String,System.IO.SearchOption)">
            
             GetDirectories
            
             <summary>
             Returns the names of the subdirectories (including their paths)
             that match the specified search pattern in the specified
             directory, and optionally searches subdirectories.
             </summary>
            
             <param name="path">
             The relative or absolute path to the directory to search.
             This string is not case-sensitive.
             </param>
            
             <param name="pattern">
             The search string to match against the names of subdirectories
             in path. This parameter can contain a combination of valid
             literal and wildcard characters, but doesn't support regular
             expressions.
             </param>
            
             <param name="option">
             One of the enumeration values that specifies whether the
             search operation should include all subdirectories or only
             the current directory.
             </param>
            
             <returns>
             An array of the full names (including paths) for the
             directories in the specified directory that match the specified
             search pattern and option, or an empty array if no directories
             are found.
             </returns>
            
        </member>
        <member name="M:Cube.FileSystem.Io.Combine(System.String[])">
            
             Combine
            
             <summary>
             Combines the specified paths.
             </summary>
            
             <param name="paths">Collection of paths.</param>
            
             <returns>Combined path.</returns>
            
        </member>
        <member name="M:Cube.FileSystem.Io.Open(System.String)">
            
             Open
            
             <summary>
             Opens the specified file as read-only.
             </summary>
            
             <param name="path">File path.</param>
            
             <returns>Read-only stream.</returns>
            
        </member>
        <member name="M:Cube.FileSystem.Io.Create(System.String)">
            
             Create
            
             <summary>
             Creates or opens the specified file and gets the stream.
             </summary>
            
             <param name="path">Path to create or open file.</param>
            
             <returns>FileStream object to write.</returns>
            
        </member>
        <member name="M:Cube.FileSystem.Io.CreateDirectory(System.String)">
            
             CreateDirectory
            
             <summary>
             Creates a directory. If a file or directory with the specified
             path exists, the method will be skipped.
             </summary>
            
             <param name="path">Path to create.</param>
            
        </member>
        <member name="M:Cube.FileSystem.Io.SetAttributes(System.String,System.IO.FileAttributes)">
            
             SetAttributes
            
             <summary>
             Sets the specified attributes to the specified file or directory.
             </summary>
            
             <param name="path">Target path.</param>
             <param name="attr">Attributes to set.</param>
            
        </member>
        <member name="M:Cube.FileSystem.Io.SetCreationTime(System.String,System.DateTime)">
            
             SetCreationTime
            
             <summary>
             Sets the specified creation time to the specified file or
             directory.
             </summary>
            
             <param name="path">Target path.</param>
             <param name="time">Creation time.</param>
            
        </member>
        <member name="M:Cube.FileSystem.Io.SetLastWriteTime(System.String,System.DateTime)">
            
             SetLastWriteTime
            
             <summary>
             Sets the specified last updated time to the specified file or
             directory.
             </summary>
            
             <param name="path">Target path.</param>
             <param name="time">Last updated time.</param>
            
        </member>
        <member name="M:Cube.FileSystem.Io.SetLastAccessTime(System.String,System.DateTime)">
            
             SetLastAccessTime
            
             <summary>
             Sets the specified last accessed time to the specified file or
             directory.
             </summary>
            
             <param name="path">Target path.</param>
             <param name="time">Last accessed time.</param>
            
        </member>
        <member name="M:Cube.FileSystem.Io.Delete(System.String)">
            
             Delete
            
             <summary>
             Deletes the specified file or directory.
             If the specified path is a directory and has subdirectories,
             the method will recursively remove all of them.
             </summary>
            
             <param name="path">Path to delete.</param>
            
        </member>
        <member name="M:Cube.FileSystem.Io.Move(System.String,System.String,System.Boolean)">
            
             Move
            
             <summary>
             Moves the specified file.
             </summary>
            
             <param name="src">Source path.</param>
             <param name="dest">Destination path.</param>
             <param name="overwrite">Overwrite or not.</param>
            
        </member>
        <member name="M:Cube.FileSystem.Io.Copy(System.String,System.String,System.Boolean)">
            
             Copy
            
             <summary>
             Copies the specified file.
             </summary>
            
             <param name="src">Source path.</param>
             <param name="dest">Destination path.</param>
             <param name="overwrite">Overwrite or not.</param>
            
        </member>
        <member name="M:Cube.FileSystem.Io.GetController">
            
             GetController
            
             <summary>
             Get the current I/O controller. The method mainly used by the
             IoEx static class.
             </summary>
            
             <returns>IoController object.</returns>
            
        </member>
        <member name="M:Cube.FileSystem.Io.CreateParentDirectory(Cube.FileSystem.Entity)">
            
             CreateParentDirectory
            
             <summary>
             Creates the parent directory.
             </summary>
            
        </member>
        <member name="M:Cube.FileSystem.Io.CreateDirectory(System.String,Cube.FileSystem.Entity)">
            
             CreateDirectory
            
             <summary>
             Creates a directory and sets the attributes.
             </summary>
            
        </member>
        <member name="M:Cube.FileSystem.Io.CopyDirectory(Cube.FileSystem.Entity,Cube.FileSystem.Entity,System.Boolean)">
            
             CopyDirectory
            
             <summary>
             Copies the specified directory and files.
             </summary>
            
        </member>
        <member name="M:Cube.FileSystem.Io.CopyFile(Cube.FileSystem.Entity,Cube.FileSystem.Entity,System.Boolean)">
            
             CopyFile
            
             <summary>
             Copies the file.
             </summary>
            
        </member>
        <member name="M:Cube.FileSystem.Io.MoveDirectory(Cube.FileSystem.Entity,Cube.FileSystem.Entity,System.Boolean)">
            
             MoveDirectory
            
             <summary>
             Moves the directory.
             </summary>
            
        </member>
        <member name="M:Cube.FileSystem.Io.MoveFile(Cube.FileSystem.Entity,Cube.FileSystem.Entity,System.Boolean)">
            
             MoveFile
            
             <summary>
             Moves the file.
             </summary>
            
        </member>
        <member name="M:Cube.FileSystem.Io.MoveFile(Cube.FileSystem.Entity,Cube.FileSystem.Entity)">
            
             MoveFile
            
             <summary>
             Moves the file.
             </summary>
            
        </member>
        <member name="T:Cube.FileSystem.IoController">
            
             IoController
            
             <summary>
             Provides functionality to control methods of the IO class.
             </summary>
            
        </member>
        <member name="M:Cube.FileSystem.IoController.GetEntitySource(System.String)">
            
             GetEntitySource
            
             <summary>
             Gets the EntitySource object with the specified arguments.
             </summary>
            
             <param name="src">Source path.</param>
            
             <returns>EntitySource object.</returns>
            
        </member>
        <member name="M:Cube.FileSystem.IoController.Exists(System.String)">
            
             Exists
            
             <summary>
             Determines if the specified file or directory exists.
             </summary>
            
             <param name="path">Path to check.</param>
            
             <returns>true for exists.</returns>
            
        </member>
        <member name="M:Cube.FileSystem.IoController.GetFiles(System.String,System.String,System.IO.SearchOption)">
            
             GetFiles
            
             <summary>
             Returns the names of files (including their paths) that
             match the specified search pattern in the specified directory,
             using a value to determine whether to search subdirectories.
             </summary>
            
             <param name="path">
             The relative or absolute path to the directory to search.
             This string is not case-sensitive.
             </param>
            
             <param name="pattern">
             The search string to match against the names of files in path.
             This parameter can contain a combination of valid literal path
             and wildcard (* and ?) characters, but it doesn't support
             regular expressions.
             </param>
            
             <param name="option">
             One of the enumeration values that specifies whether the search
             operation should include only the current directory or should
             include all subdirectories.
             </param>
            
             <returns>
             An array of the full names (including paths) for the files
             in the specified directory that match the specified search
             pattern and option, or an empty array if no files are found.
             </returns>
            
        </member>
        <member name="M:Cube.FileSystem.IoController.GetDirectories(System.String,System.String,System.IO.SearchOption)">
            
             GetDirectories
            
             <summary>
             Returns the names of the subdirectories (including their paths)
             that match the specified search pattern in the specified
             directory, and optionally searches subdirectories.
             </summary>
            
             <param name="path">
             The relative or absolute path to the directory to search.
             This string is not case-sensitive.
             </param>
            
             <param name="pattern">
             The search string to match against the names of subdirectories
             in path. This parameter can contain a combination of valid
             literal and wildcard characters, but doesn't support regular
             expressions.
             </param>
            
             <param name="option">
             One of the enumeration values that specifies whether the
             search operation should include all subdirectories or only
             the current directory.
             </param>
            
             <returns>
             An array of the full names (including paths) for the
             directories in the specified directory that match the specified
             search pattern and option, or an empty array if no directories
             are found.
             </returns>
            
        </member>
        <member name="M:Cube.FileSystem.IoController.Combine(System.String[])">
            
             Combine
            
             <summary>
             Combines the specified paths.
             </summary>
            
             <param name="paths">Collection of paths.</param>
            
             <returns>Combined path.</returns>
            
        </member>
        <member name="M:Cube.FileSystem.IoController.Open(System.String)">
            
             Open
            
             <summary>
             Opens the specified file as read-only.
             </summary>
            
             <param name="path">Path to open file.</param>
            
             <returns>Read-only stream.</returns>
            
        </member>
        <member name="M:Cube.FileSystem.IoController.Create(System.String)">
            
             Create
            
             <summary>
             Creates or opens the specified file and gets the stream.
             </summary>
            
             <param name="path">Path to create or open file.</param>
            
             <returns>FileStream object to write.</returns>
            
        </member>
        <member name="M:Cube.FileSystem.IoController.CreateDirectory(System.String)">
            
             CreateDirectory
            
             <summary>
             Creates a directory.
             </summary>
            
             <param name="path">Path to create.</param>
            
        </member>
        <member name="M:Cube.FileSystem.IoController.SetAttributes(System.String,System.IO.FileAttributes)">
            
             SetAttributes
            
             <summary>
             Sets the specified attributes to the specified file or directory.
             </summary>
            
             <param name="path">Target path.</param>
             <param name="attr">Attributes to set.</param>
            
        </member>
        <member name="M:Cube.FileSystem.IoController.SetCreationTime(System.String,System.DateTime)">
            
             SetCreationTime
            
             <summary>
             Sets the specified creation time to the specified file or
             directory.
             </summary>
            
             <param name="path">Target path.</param>
             <param name="time">Creation time.</param>
            
        </member>
        <member name="M:Cube.FileSystem.IoController.SetLastWriteTime(System.String,System.DateTime)">
            
             SetLastWriteTime
            
             <summary>
             Sets the specified last updated time to the specified file or
             directory.
             </summary>
            
             <param name="path">Target path.</param>
             <param name="time">Last updated time.</param>
            
        </member>
        <member name="M:Cube.FileSystem.IoController.SetLastAccessTime(System.String,System.DateTime)">
            
             SetLastAccessTime
            
             <summary>
             Sets the specified last accessed time to the specified file or
             directory.
             </summary>
            
             <param name="path">Target path.</param>
             <param name="time">Last accessed time.</param>
            
        </member>
        <member name="M:Cube.FileSystem.IoController.Delete(System.String)">
            
             Delete
            
             <summary>
             Deletes the specified file or directory.
             If the specified path is a directory and has subdirectories,
             the method will recursively remove all of them.
             </summary>
            
             <param name="path">Path to delete.</param>
            
        </member>
        <member name="M:Cube.FileSystem.IoController.Move(System.String,System.String)">
            
             Move
            
             <summary>
             Moves the specified file.
             </summary>
            
             <param name="src">Source path.</param>
             <param name="dest">Destination path.</param>
            
        </member>
        <member name="M:Cube.FileSystem.IoController.Copy(System.String,System.String,System.Boolean)">
            
             Copy
            
             <summary>
             Copies the specified file.
             </summary>
            
             <param name="src">Source path.</param>
             <param name="dest">Destination path.</param>
             <param name="overwrite">Overwrite or not.</param>
            
        </member>
        <member name="T:Cube.FileSystem.IoEx">
            
             IoEx
            
             <summary>
             Provides utility methods for a path, file, or directory.
             </summary>
            
        </member>
        <member name="M:Cube.FileSystem.IoEx.Load``1(System.String,System.Func{System.IO.Stream,``0})">
            
             Load
            
             <summary>
             Creates a new stream from the specified file and executes
             the specified callback.
             </summary>
            
             <param name="src">Path of the source file.</param>
             <param name="callback">User action.</param>
            
             <returns>Executed result.</returns>
            
        </member>
        <member name="M:Cube.FileSystem.IoEx.Save(System.String,System.Action{System.IO.Stream})">
            
             Save
            
             <summary>
             Creates a new memory stream, executes the specified callback,
             and writes the result to the specified file.
             </summary>
            
             <param name="dest">Path of the writing file.</param>
             <param name="callback">User action.</param>
            
        </member>
        <member name="M:Cube.FileSystem.IoEx.Touch(System.String)">
            
             Touch
            
             <summary>
             Creates a new file or updates the timestamp of the specified
             path.
             </summary>
            
             <param name="src">Path to create or update.</param>
            
        </member>
        <member name="M:Cube.FileSystem.IoEx.Touch(System.String,System.DateTime)">
            
             Touch
            
             <summary>
             Creates a new file or updates the timestamp of the specified
             path.
             </summary>
            
             <param name="src">Path to create or update.</param>
             <param name="timestamp">Timestamp to set.</param>
            
        </member>
        <member name="M:Cube.FileSystem.IoEx.Rename(System.String,System.String)">
            
             Rename
            
             <summary>
             Changes the filename of a path string.
             </summary>
            
             <param name="src">Source path.</param>
             <param name="filename">Filename to rename.</param>
            
             <returns>Renamed path.</returns>
            
        </member>
        <member name="M:Cube.FileSystem.IoEx.RenameExtension(System.String,System.String)">
            
             RenameExtension
            
             <summary>
             Changes the extension of a path string.
             </summary>
            
             <param name="src">Source path.</param>
             <param name="extension">Extension to rename.</param>
            
             <returns>Renamed path.</returns>
            
        </member>
        <member name="M:Cube.FileSystem.IoEx.GetUniqueName(System.String)">
            
             GetUniqueName
            
             <summary>
             Gets a unique name with the specified path.
             </summary>
            
             <param name="src">Base path.</param>
            
             <returns>Unique name.</returns>
            
        </member>
        <member name="M:Cube.FileSystem.IoEx.GetUniqueName(System.String,System.Func{System.String,System.Int32,System.String})">
            
             GetUniqueName
            
             <summary>
             Gets a unique name with the specified path.
             </summary>
            
             <param name="src">Path to check.</param>
             <param name="converter">Function to convert path.</param>
            
             <returns>Unique name.</returns>
            
        </member>
        <member name="M:Cube.FileSystem.IoEx.GetTypeName(System.String)">
            
             GetTypeName
            
             <summary>
             Gets a value that represents type of the specified file.
             </summary>
            
             <param name="src">Path of the source file.</param>
            
             <returns>Type name of the file.</returns>
            
        </member>
        <member name="M:Cube.FileSystem.IoEx.GetEntitySource(System.String)">
            
             GetEntitySource
            
             <summary>
             Gets the EntitySource object with the specified arguments.
             </summary>
            
             <param name="src">Source path.</param>
            
             <returns>EntitySource object.</returns>
            
        </member>
        <member name="T:Cube.FileSystem.SafePath">
            
             SafePath
            
             <summary>
             Provides functionality to escape or remove the part of the provided
             path according to the provided condition. The class also escapes
             characters that cannot be used on Windows.
             </summary>
            
        </member>
        <member name="M:Cube.FileSystem.SafePath.#ctor(System.String)">
            
             SafePath
            
             <summary>
             Initializes a new instance of the SafePath class with the
             specified path.
             </summary>
            
             <param name="src">Original path.</param>
            
        </member>
        <member name="P:Cube.FileSystem.SafePath.Source">
            
             Source
            
             <summary>
             Gets the original path.
             </summary>
            
        </member>
        <member name="P:Cube.FileSystem.SafePath.Value">
            
             Value
            
             <summary>
             Gets the escaped path.
             </summary>
            
        </member>
        <member name="P:Cube.FileSystem.SafePath.Parts">
            
             Parts
            
             <summary>
             Get a sequence of file or directory names separated by the
             path separator. Each file or directory name is escaped by
             the provided condition.
             </summary>
            
        </member>
        <member name="P:Cube.FileSystem.SafePath.EscapeChar">
            
             EscapeChar
            
             <summary>
             Gets the character used to replace invalid characters.
             </summary>
            
        </member>
        <member name="P:Cube.FileSystem.SafePath.AllowDriveLetter">
            
             AllowDriveLetter
            
             <summary>
             Gets or sets a value indicating whether the drive letter is
             allowed.
             </summary>
            
             <remarks>
             If set to false, the ":" (colon) following the drive letter will
             also be escaped.
             </remarks>
            
        </member>
        <member name="P:Cube.FileSystem.SafePath.AllowCurrentDirectory">
            
             AllowCurrentDirectory
            
             <summary>
             Gets or sets a value indicating whether the character
             "." (single-dot), which indicates the current directory, is
             allowed.
             </summary>
            
             <remarks>
             If set to false, the "." character and the following path
             separator will simply be removed.
             For example, "foo\.\bar" would become "foo\bar".
             </remarks>
            
             <see cref="P:Cube.FileSystem.SafePath.AllowInactivation"/>
            
        </member>
        <member name="P:Cube.FileSystem.SafePath.AllowParentDirectory">
            
             AllowParentDirectory
            
             <summary>
             Gets or sets a value indicating whether the character
             ".." (double-dot), which indicates the parent directory, is
             allowed.
             </summary>
            
             <remarks>
             If set to false, the ".." character and the following path
             separator will simply be removed.
             For example, "foo\..\bar" would become "foo\bar".
             </remarks>
            
             <see cref="P:Cube.FileSystem.SafePath.AllowInactivation"/>
            
        </member>
        <member name="P:Cube.FileSystem.SafePath.AllowInactivation">
            
             AllowInactivation
            
             <summary>
             Gets or sets a value indicating whether the character "\\?\",
             which indicates the service inactivation, is allowed.
             </summary>
            
             <remarks>
             In deactivating a service function, ". and "..." are prohibited,
             so when set to true, these strings will be removed regardless of
             the AllowCurrentDirectory and AllowParentDirectory settings.
             Also, for implementation reasons, the AllowUnc setting is also
             ignored when set to true.
             </remarks>
            
        </member>
        <member name="P:Cube.FileSystem.SafePath.AllowUnc">
            
             AllowUnc
            
             <summary>
             Gets or sets a value indicating whether the character "\\",
             which indicates the UNC path, is allowed.
             </summary>
            
        </member>
        <member name="P:Cube.FileSystem.SafePath.SeparatorChar">
            
             SeparatorChar
            
             <summary>
             Gets the character that is used as the path separator.
             </summary>
            
        </member>
        <member name="P:Cube.FileSystem.SafePath.SeparatorChars">
            
             SeparatorChars
            
             <summary>
             Gets the collection that may be used as the path separator.
             </summary>
            
        </member>
        <member name="P:Cube.FileSystem.SafePath.CurrentDirectorySymbol">
            
             CurrentDirectorySymbol
            
             <summary>
             Gets the value that indicates the current directory.
             </summary>
            
        </member>
        <member name="P:Cube.FileSystem.SafePath.ParentDirectorySymbol">
            
             ParentDirectorySymbol
            
             <summary>
             Gets the value that indicates the parent directory.
             </summary>
            
        </member>
        <member name="P:Cube.FileSystem.SafePath.UncSymbol">
            
             UncSymbol
            
             <summary>
             Gets the value that indicates the UNC path.
             </summary>
            
        </member>
        <member name="P:Cube.FileSystem.SafePath.InactivationSymbol">
            
             InactivationSymbol
            
             <summary>
             Gets the value that indicates the service inactivation.
             </summary>
            
        </member>
        <member name="P:Cube.FileSystem.SafePath.InvalidChars">
            
             InvalidChars
            
             <summary>
             Gets the collection of characters that cannot be used as part
             of a path.
             </summary>
            
        </member>
        <member name="P:Cube.FileSystem.SafePath.ReservedNames">
            
             ReservedNames
            
             <summary>
             Gets the collection of names that is reserved by Windows.
             </summary>
            
        </member>
        <member name="M:Cube.FileSystem.SafePath.Set``1(``0@,``0)">
            
             Set
            
             <summary>
             Set the specified value to the specified field.
             </summary>
            
        </member>
        <member name="M:Cube.FileSystem.SafePath.EscapeOnce">
            
             EscapeOnce
            
             <summary>
             Invokes the escape operation.
             </summary>
            
        </member>
        <member name="M:Cube.FileSystem.SafePath.Escape(System.String,System.Int32)">
            
             Escape
            
             <summary>
             Invokes the escape operation.
             </summary>
            
        </member>
        <member name="M:Cube.FileSystem.SafePath.Combine(Cube.FileSystem.SafePath.PathKind,System.String[])">
            
             Combine
            
             <summary>
             Combines the specified paths.
             </summary>
            
        </member>
        <member name="M:Cube.FileSystem.SafePath.IsRemove(System.String,System.Int32)">
            
             IsRemove
            
             <summary>
             Determines whether the specified name will be removed.
             </summary>
            
        </member>
        <member name="M:Cube.FileSystem.SafePath.IsReserved(System.String)">
            
             IsReserved
            
             <summary>
             Determines whether the specified name is reserved.
             </summary>
            
        </member>
        <member name="M:Cube.FileSystem.SafePath.GetAllowCurrentDirectory">
            
             GetAllowCurrentDirectory
            
             <summary>
             Gets a value indicating whether the character "." (single-dot)
             is allowed.
             </summary>
            
             <remarks>
             When AllowInactivation is enabled, it is disabled.
             </remarks>
            
        </member>
        <member name="M:Cube.FileSystem.SafePath.GetAllowParentDirectory">
            
             GetAllowParentDirectory
            
             <summary>
             Gets a value indicating whether the character ".." (double-dot)
             is allowed.
             </summary>
            
             <remarks>
             When AllowInactivation is enabled, it is disabled.
             </remarks>
            
        </member>
        <member name="M:Cube.FileSystem.SafePath.GetAllowUnc">
            
             GetAllowUnc
            
             <summary>
             Gets a value indicating whether the UNC path  is allowed.
             </summary>
            
             <remarks>
             When AllowInactivation is enabled, it is disabled.
             </remarks>
            
        </member>
        <member name="T:Cube.FileSystem.SafePath.PathKind">
            
             PathKind
            
             <summary>
             Specifies the path kind.
             </summary>
            
        </member>
        <member name="F:Cube.FileSystem.SafePath.PathKind.Normal">
            <summary>Normal path.</summary>
        </member>
        <member name="F:Cube.FileSystem.SafePath.PathKind.Unc">
            <summary>UNC path.</summary>
        </member>
        <member name="F:Cube.FileSystem.SafePath.PathKind.Inactivation">
            <summary>Inactivated path.</summary>
        </member>
        <member name="T:Cube.FileSystem.SafePath.EscapedObject">
            
             EscapedObject
            
             <summary>
             Represents the escaped object.
             </summary>
            
        </member>
        <member name="M:Cube.FileSystem.SafePath.EscapedObject.#ctor(Cube.FileSystem.SafePath.PathKind,System.String[],System.String)">
            
             EscapedObject
            
             <summary>
             Initializes a new instance of the EscapedObject with the
             specified arguments.
             </summary>
            
             <param name="k">Path kind.</param>
             <param name="v">Collection of escaped names.</param>
             <param name="s">Escaped path.</param>
            
        </member>
        <member name="P:Cube.FileSystem.SafePath.EscapedObject.Kind">
            
             Kind
            
             <summary>
             Gets the path kind.
             </summary>
            
        </member>
        <member name="P:Cube.FileSystem.SafePath.EscapedObject.Parts">
            
             Parts
            
             <summary>
             Gets the collection of escaped file or directory names.
             </summary>
            
        </member>
        <member name="P:Cube.FileSystem.SafePath.EscapedObject.Value">
            
             Value
            
             <summary>
             Gets the escaped path.
             </summary>
            
             <remarks>
             The value will be a simple concatenation of the Parts
             property and the prefix according to Kind.
             </remarks>
            
        </member>
        <member name="T:Cube.FileSystem.Shortcut">
            
             Shortcut
            
             <summary>
             Provides functionality to get, create, or delete a shortcut.
             </summary>
            
        </member>
        <member name="P:Cube.FileSystem.Shortcut.FullName">
            
             FullName
            
             <summary>
             Gets or sets the path of the shortcut.
             </summary>
            
        </member>
        <member name="P:Cube.FileSystem.Shortcut.Target">
            
             Target
            
             <summary>
             Gets or sets the target path of the shortcut.
             </summary>
            
        </member>
        <member name="P:Cube.FileSystem.Shortcut.Arguments">
            
             Arguments
            
             <summary>
             Gets or sets the arguments of the shortcut.
             </summary>
            
        </member>
        <member name="P:Cube.FileSystem.Shortcut.IconLocation">
            
             IconLocation
            
             <summary>
             Gets or sets the icon location of the shortcut.
             </summary>
            
             <remarks>
             The format of IconLocation is IconFileName[,IconIndex].
             </remarks>
            
        </member>
        <member name="P:Cube.FileSystem.Shortcut.IconFileName">
            
             IconFileName
            
             <summary>
             Gets the icon path of the shortcut.
             </summary>
            
        </member>
        <member name="P:Cube.FileSystem.Shortcut.IconIndex">
            
             IconIndex
            
             <summary>
             Gets the icon index of the shortcut.
             </summary>
            
        </member>
        <member name="P:Cube.FileSystem.Shortcut.Exists">
            
             Exists
            
             <summary>
             Gets a value indicating whether the shortcut exists.
             </summary>
            
        </member>
        <member name="M:Cube.FileSystem.Shortcut.Resolve(System.String)">
            
             Resolve
            
             <summary>
             Creates the Shortcut object with the specified link path.
             </summary>
            
             <param name="link">Link path.</param>
            
             <returns>Shortcut object.</returns>
            
        </member>
        <member name="M:Cube.FileSystem.Shortcut.Create">
            
             Create
            
             <summary>
             Creates a new shortcut with the current settings.
             </summary>
            
        </member>
        <member name="M:Cube.FileSystem.Shortcut.Delete">
            
             Delete
            
             <summary>
             Delete the shortcut.
             </summary>
            
        </member>
        <member name="M:Cube.FileSystem.Shortcut.Normalize(System.String)">
            
             Normalize
            
             <summary>
             Normalizes the link path
             </summary>
            
        </member>
        <member name="M:Cube.FileSystem.Shortcut.Invoke(System.Action{Cube.IShellLink})">
            
             Invoke
            
             <summary>
             Invokes the specified action.
             </summary>
            
        </member>
        <member name="M:Cube.FileSystem.Shortcut.GetTarget(Cube.IShellLink)">
            
             GetTarget
            
             <summary>
             Gets the target path of the specified link.
             </summary>
            
        </member>
        <member name="M:Cube.FileSystem.Shortcut.GetArguments(Cube.IShellLink)">
            
             GetArguments
            
             <summary>
             Gets the arguments of the specified link.
             </summary>
            
        </member>
        <member name="M:Cube.FileSystem.Shortcut.GetIconLocation(Cube.IShellLink)">
            
             GetIconLocation
            
             <summary>
             Gets the icon location of the specified link.
             </summary>
            
        </member>
        <member name="M:Cube.FileSystem.Shortcut.GetPersistFile(Cube.IShellLink)">
            
             GetPersistFile
            
             <summary>
             Gets the IPersistFile object from the specified object.
             </summary>
            
        </member>
        <member name="M:Cube.FileSystem.Shortcut.GetBuffer">
            
             GetBuffer
            
             <summary>
             Creates a new instance of the StringBuilder class with a
             specific capacity.
             </summary>
            
        </member>
        <member name="T:Cube.FileSystem.Startup">
            
             Startup
            
             <summary>
             Provides functionality to register and delete startup settings.
             </summary>
            
        </member>
        <member name="M:Cube.FileSystem.Startup.#ctor(System.String)">
            
             Startup
            
             <summary>
             Initializes a new instance of the Startup class with the
             specified name.
             </summary>
            
             <param name="name">Name to register.</param>
            
        </member>
        <member name="P:Cube.FileSystem.Startup.Name">
            
             Name
            
             <summary>
             Gets the name registered in startup programs.
             </summary>
            
        </member>
        <member name="P:Cube.FileSystem.Startup.Enabled">
            
             Enabled
            
             <summary>
             Gets or sets the value indicating whether the startup
             settings is enabled.
             </summary>
            
        </member>
        <member name="P:Cube.FileSystem.Startup.Source">
            
             Source
            
             <summary>
             Gets or sets the source (filename, etc) that executes when
             startup.
             </summary>
            
        </member>
        <member name="P:Cube.FileSystem.Startup.Arguments">
            
             Arguments
            
             <summary>
             Gets or sets the arguments of the Source property.
             </summary>
            
        </member>
        <member name="P:Cube.FileSystem.Startup.Command">
            
             Command
            
             <summary>
             Gets the registered command.
             </summary>
            
        </member>
        <member name="M:Cube.FileSystem.Startup.Save">
            
             Save
            
             <summary>
             Saves settings to the registry.
             </summary>
            
        </member>
        <member name="M:Cube.FileSystem.Startup.Save(System.Boolean)">
            
             Save
            
             <summary>
             Saves settings to the registry with the specified settings.
             </summary>
            
             <param name="checkExists">
             Value indicating whether to check for the existence of the
             provided source. If the value is set to true and the provided
             source does not exist, the provided name will be removed from
             the registry regardless of the Enabled property.
             </param>
            
        </member>
        <member name="M:Cube.FileSystem.Startup.Dispose(System.Boolean)">
            
             Dispose
            
             <summary>
             Releases the unmanaged resources used by the object and
             optionally releases the managed resources.
             </summary>
            
             <param name="disposing">
             true to release both managed and unmanaged resources;
             false to release only unmanaged resources.
             </param>
            
        </member>
        <member name="M:Cube.FileSystem.Startup.Open(System.Boolean)">
            
             Open
            
             <summary>
             Gets the RegistryKey object for startup programs.
             </summary>
            
        </member>
        <member name="T:Cube.HashCode">
            
             HashCode
            
             <summary>
             Provides functionality to calculate the value used in the
             GetHashCode method.
             </summary>
            
             <remarks>
             Implementation is referenced System.Numerics.Hashing.HashHelpers
             in the .NET CoreRT project.
             </remarks>
            
             <seealso href="https://github.com/dotnet/corert" />
            
        </member>
        <member name="M:Cube.HashCode.Create(System.Int32[])">
            
             Create
            
             <summary>
             Creates a value used in the GetHashCode method with the
             specified values.
             </summary>
            
             <param name="values">Source values</param>
            
             <returns>Calculated hash.</returns>
            
        </member>
        <member name="T:Cube.Icons.FileIcon">
            
             FileIcon
            
             <summary>
             Provides functionality to get an icon associated by the provided
             file or directory.
             </summary>
            
        </member>
        <member name="M:Cube.Icons.FileIcon.Get(System.String,Cube.Icons.IconSize)">
            
             Get
            
             <summary>
             Gets a new instance of the Icon class with the specified
             arguments.
             </summary>
            
             <param name="src">File or directory path.</param>
             <param name="size">Icon size.</param>
            
             <returns>Icon object.</returns>
            
        </member>
        <member name="M:Cube.Icons.FileIcon.GetImage(System.String,Cube.Icons.IconSize)">
            
             GetImage
            
             <summary>
             Gets a new instance of the Image instance with the specified
             arguments.
             </summary>
            
             <param name="src">File or directory path.</param>
             <param name="size">Icon size.</param>
            
             <returns>Image object.</returns>
            
        </member>
        <member name="T:Cube.Icons.IconSize">
            
             IconSize
            
             <summary>
             Specifies the size of the icons provided by the system.
             </summary>
            
        </member>
        <member name="F:Cube.Icons.IconSize.Large">
            <summary>32x32 pixel.</summary>
        </member>
        <member name="F:Cube.Icons.IconSize.Small">
            <summary>16x16 pixel.</summary>
        </member>
        <member name="F:Cube.Icons.IconSize.ExtraLarge">
            <summary>48x48 pixel.</summary>
        </member>
        <member name="F:Cube.Icons.IconSize.Jumbo">
            <summary>256x256 pixel.</summary>
        </member>
        <member name="T:Cube.Icons.StockIcon">
            
             StockIcon
            
             <summary>
             Specifies icons provided by the system.
             </summary>
            
        </member>
        <member name="F:Cube.Icons.StockIcon.DocumentNotAssociated">
            <summary>Unassociated file.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.DocumentAssociated">
            <summary>Associated file.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.Application">
            <summary>Application.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.Folder">
            <summary>Folder.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.FolderOpen">
            <summary>Open folder.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.Floppy525">
            <summary>5.25 inch floppy disk.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.Floppy35">
            <summary>3.5 inch floppy disk.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.RemovableDrive">
            <summary>Removable drive.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.FixedDrive">
            <summary>Local drive.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.NetworkDrive">
            <summary>Network drive.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.NetworkDriveDisconnected">
            <summary>Disconnected network drive.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.CdDrive">
            <summary>CD drive.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.RamDrive">
            <summary>RAM drive</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.World">
            <summary>Internet.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.Server">
            <summary>Server.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.Printer">
            <summary>Printer.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.Network">
            <summary>Network.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.Search">
            <summary>Search.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.Help">
            <summary>Help.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.Share">
            <summary>Share.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.Link">
            <summary>Link.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.SlowFile">
            <summary>Slow file.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.Recycle">
            <summary>Recycle box.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.RecycleFull">
            <summary>Recycle box with some objects.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.AudioCdMedia">
            <summary>Audio CD media.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.Lock">
            <summary>Lock.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.AutoList">
            <summary>Auto list.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.NetworkPrinter">
            <summary>Network printer.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.ServerShare">
            <summary>Shared server.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.FaxPrinter">
            <summary>FAX printer.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.NetworkFaxPrinter">
            <summary>Network FAX printer.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.PrintToFile">
            <summary>Print to file.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.Stack">
            <summary>Stack.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.SvcdMedia">
            <summary>SVCD media.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.StuffedFolder">
            <summary>Stuffed folder.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.UnknownDrive">
            <summary>Unknown drive.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.DvdDrive">
            <summary>DVD drive.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.DvdMedia">
            <summary>DVD media.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.DvdRamMedia">
            <summary>DVD-RAM media.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.DvdRwMedia">
            <summary>DVD-RW media.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.DvdRMedia">
            <summary>DVD-R media.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.DvdRomMedia">
            <summary>DVD ROM media.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.CdPlusMedia">
            <summary>CD+ media.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.CdRwMedia">
            <summary>CD-RW media.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.CdRMedia">
            <summary>CD-R media.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.Burning">
            <summary>Saving to media</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.BlankCdMedia">
            <summary>Empty CD media.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.CdRomMedia">
            <summary>CD ROM media.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.AudioFiles">
            <summary>Audio files.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.ImageFiles">
            <summary>Image files.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.VideoFiles">
            <summary>Video files.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.MixedFiles">
            <summary>Multimedia files.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.FolderBack">
            <summary>Back.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.FolderFront">
            <summary>Forward.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.Shield">
            <summary>Shield.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.Warning">
            <summary>Warning.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.Information">
            <summary>Information.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.Error">
            <summary>Error.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.Key">
            <summary>Key.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.Software">
            <summary>Software.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.Rename">
            <summary>Rename.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.Delete">
            <summary>Delete.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.AudioDvdMedia">
            <summary>Audio DVD media.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.VideoDvdMedia">
            <summary>Video DVD media.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.EnhancedCdMedia">
            <summary>CD media.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.EnhancedDvdMedia">
            <summary>DVD media.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.HdDvdMedia">
            <summary>HD-DVD media.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.BluRayMedia">
            <summary>BluRay media.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.VcdMedia">
            <summary>VCD media.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.DvdPlusRMedia">
            <summary>DVD+R media.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.DvdPlusRwMedia">
            <summary>DVD+RW media.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.Desktop">
            <summary>Desktop.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.Mobile">
            <summary>Mobile.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.Users">
            <summary>User.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.SmartMedia">
            <summary>Smart media.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.CompactFlash">
            <summary>Compact flash.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.CellPhone">
            <summary>Cell phone.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.Camera">
            <summary>Camera.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.VideoCamera">
            <summary>Video camera.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.AudioPlayer">
            <summary>Audio player.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.NetworkConnect">
            <summary>Connected to the network.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.Internet">
            <summary>Internet.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.Zip">
            <summary>Zip.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.Settings">
            <summary>Settings.</summary>
        </member>
        <member name="F:Cube.Icons.StockIcon.MaxIcons">
            <summary>The last icon.</summary>
        </member>
        <member name="T:Cube.Icons.StockIconExtension">
            
             StockIconExtension
            
             <summary>
             Provides extended methods of the StockIcon enum.
             </summary>
            
        </member>
        <member name="M:Cube.Icons.StockIconExtension.Get(Cube.Icons.StockIcon,Cube.Icons.IconSize)">
            
             Get
            
             <summary>
             Gets a new instance of the Icon class with the specified
             arguments.
             </summary>
            
             <param name="src">ID of the stock icons.</param>
             <param name="size">Icon size.</param>
            
             <returns>Icon object.</returns>
            
        </member>
        <member name="M:Cube.Icons.StockIconExtension.GetImage(Cube.Icons.StockIcon,Cube.Icons.IconSize)">
            
             GetImage
            
             <summary>
             Gets a new instance of the Image instance with the specified
             arguments.
             </summary>
            
             <param name="src">ID of the stock icons.</param>
             <param name="size">Icon size.</param>
            
             <returns>Image object.</returns>
            
        </member>
        <member name="T:Cube.Language">
            
             Language
            
             <summary>
             Specifies kinds of language.
             </summary>
            
             <seealso href="https://msdn.microsoft.com/ja-jp/library/cc392381.aspx" />
            
        </member>
        <member name="F:Cube.Language.Auto">
            <summary>Same as the system locale</summary>
        </member>
        <member name="F:Cube.Language.English">
            <summary>English</summary>
        </member>
        <member name="F:Cube.Language.Japanese">
            <summary>Japanese</summary>
        </member>
        <member name="F:Cube.Language.German">
            <summary>German</summary>
        </member>
        <member name="F:Cube.Language.Spanish">
            <summary>Spanish</summary>
        </member>
        <member name="F:Cube.Language.French">
            <summary>French</summary>
        </member>
        <member name="F:Cube.Language.Russian">
            <summary>Russian</summary>
        </member>
        <member name="F:Cube.Language.Portuguese">
            <summary>Portuguese</summary>
        </member>
        <member name="T:Cube.LanguageExtension">
            
             LanguageExtension
            
             <summary>
             Provides extended methods for the Language enum.
             </summary>
            
        </member>
        <member name="M:Cube.LanguageExtension.#cctor">
            
             LanguageExtension
            
             <summary>
             Initializes static fields.
             </summary>
            
        </member>
        <member name="M:Cube.LanguageExtension.ToCultureInfo(Cube.Language)">
            
             ToCultureInfo
            
             <summary>
             Gets the CultureInfo object from the specified value.
             </summary>
            
             <param name="src">Language value.</param>
            
             <returns>CultureInfo object.</returns>
            
        </member>
        <member name="T:Cube.Locale">
            
             Locale
            
             <summary>
             Provides the event trigger to changed the locale.
             </summary>
            
             <seealso href="https://msdn.microsoft.com/ja-jp/library/cc392381.aspx" />
            
        </member>
        <member name="M:Cube.Locale.#cctor">
            
             Locale
            
             <summary>
             Initializes static fields.
             </summary>
            
        </member>
        <member name="P:Cube.Locale.Language">
            
             Language
            
             <summary>
             Gets the current language.
             </summary>
            
        </member>
        <member name="M:Cube.Locale.Set(Cube.Language)">
            
             Set
            
             <summary>
             Sets the specified language as the current locale.
             </summary>
            
             <param name="value">Language.</param>
            
        </member>
        <member name="M:Cube.Locale.Subscribe(System.Action{Cube.Language})">
            
             Subscribe
            
             <summary>
             Adds the specified callback to the subscription.
             </summary>
            
             <param name="callback">
             Callback action when the locale changes.
             </param>
            
             <returns>
             Object to remove the registered callback.
             </returns>
            
        </member>
        <member name="M:Cube.Locale.Configure">
            
             Configure
            
             <summary>
             Resets the setter function.
             </summary>
            
        </member>
        <member name="M:Cube.Locale.Configure(Cube.Accessor{Cube.Language})">
            
             Configure
            
             <summary>
             Updates the accessor of the language.
             </summary>
            
             <param name="accessor">Accessor object.</param>
            
        </member>
        <member name="T:Cube.Logger">
            
             Logger
            
             <summary>
             Provides settings and methods for logging.
             </summary>
            
        </member>
        <member name="P:Cube.Logger.Separator">
            
             Separator
            
             <summary>
             Gets or sets values to separate words.
             </summary>
            
        </member>
        <member name="M:Cube.Logger.LogDebug(System.Type,System.String[])">
            
             LogDebug
            
             <summary>
             Outputs log as DEBUG level.
             </summary>
            
             <param name="type">Target type information.</param>
             <param name="values">User messages.</param>
            
        </member>
        <member name="M:Cube.Logger.LogInfo(System.Type,System.String[])">
            
             LogInfo
            
             <summary>
             Outputs log as INFO level.
             </summary>
            
             <param name="type">Target type information.</param>
             <param name="values">User messages.</param>
            
        </member>
        <member name="M:Cube.Logger.LogInfo(System.Type,System.Reflection.Assembly)">
            
             LogInfo
            
             <summary>
             Outputs system information as INFO level.
             </summary>
            
             <param name="type">Target type information.</param>
             <param name="assembly">Assembly object.</param>
            
        </member>
        <member name="M:Cube.Logger.LogWarn(System.Type,System.String[])">
            
             LogWarn
            
             <summary>
             Outputs log as WARN level.
             </summary>
            
             <param name="type">Target type information.</param>
             <param name="values">User messages.</param>
            
        </member>
        <member name="M:Cube.Logger.LogWarn(System.Type,System.Exception)">
            
             LogWarn
            
             <summary>
             Outputs log as WARN level.
             </summary>
            
             <param name="type">Target type information.</param>
             <param name="error">Exception object.</param>
            
        </member>
        <member name="M:Cube.Logger.LogWarn(System.Type,System.Action)">
            
             LogWarn
            
             <summary>
             Outputs log as WARN level when an exception occurs.
             </summary>
            
             <param name="type">Target type information.</param>
             <param name="action">Function to monitor.</param>
            
        </member>
        <member name="M:Cube.Logger.LogError(System.Type,System.String[])">
            
             LogError
            
             <summary>
             Outputs log as ERROR level.
             </summary>
            
             <param name="type">Target type information.</param>
             <param name="values">User messages.</param>
            
        </member>
        <member name="M:Cube.Logger.LogError(System.Type,System.Exception)">
            
             LogError
            
             <summary>
             Outputs log as ERROR level.
             </summary>
            
             <param name="type">Target type information.</param>
             <param name="error">Exception object.</param>
            
        </member>
        <member name="M:Cube.Logger.LogError(System.Type,System.Action)">
            
             LogError
            
             <summary>
             Outputs log as ERROR level when an exception occurs.
             </summary>
            
             <param name="type">Target type information.</param>
             <param name="action">Function to monitor.</param>
            
        </member>
        <member name="M:Cube.Logger.ObserveTaskException">
            
             ObserveTaskException
            
             <summary>
             Observes UnobservedTaskException exceptions and outputs to the
             log file.
             </summary>
            
             <returns>Disposable object to stop to monitor.</returns>
            
        </member>
        <member name="M:Cube.Logger.GetCore(System.Type)">
            
             GetCore
            
             <summary>
             Gets the logger object.
             </summary>
            
        </member>
        <member name="M:Cube.Logger.GetMessage(System.String[])">
            
             GetMessage
            
             <summary>
             Gets the message from the specified arguments.
             </summary>
            
        </member>
        <member name="M:Cube.Logger.GetErrorMessage(System.Exception)">
            
             GetErrorMessage
            
             <summary>
             Gets the error message from the specified exception.
             </summary>
            
        </member>
        <member name="M:Cube.Logger.Invoke(System.Action,System.Action{System.Exception})">
            
             Invoke
            
             <summary>
             Invokes the specified action.
             </summary>
            
        </member>
        <member name="M:Cube.Logger.WhenTaskError(System.Object,System.Threading.Tasks.UnobservedTaskExceptionEventArgs)">
            
             WhenTaskError
            
             <summary>
             Occurs when the UnobservedTaskException is raised.
             </summary>
            
        </member>
        <member name="T:Cube.DialogMessage">
            
             DialogMessage
            
             <summary>
             Represents the message that is sent when showing a message box.
             </summary>
            
        </member>
        <member name="M:Cube.DialogMessage.#ctor">
            
             DialogMessage
            
             <summary>
             Initializes a new instance of the DialogMessage class.
             </summary>
            
        </member>
        <member name="P:Cube.DialogMessage.Title">
            
             Title
            
             <summary>
             Gets or sets the title displayed in the dialog.
             </summary>
            
        </member>
        <member name="P:Cube.DialogMessage.Icon">
            
             Icon
            
             <summary>
             Gets or sets the icon that is displayed by a message box.
             </summary>
            
        </member>
        <member name="P:Cube.DialogMessage.Buttons">
            
             Buttons
            
             <summary>
             Gets or sets the kind of buttons that are displayed by a
             message box.
             </summary>
            
        </member>
        <member name="P:Cube.DialogMessage.CancelCandidates">
            
             CancelCandidates
            
             <summary>
             Gets or sets the collection of dialog status that represent
             the cancel. If the Value property is set to the value of one of
             these properties, the Cancel property will be set to true.
             </summary>
            
        </member>
        <member name="M:Cube.DialogMessage.From(System.Exception)">
            
             From
            
             <summary>
             Creates a new instance of the DialogMessage class with the
             specified exception.
             </summary>
            
             <param name="src">Exception object.</param>
            
        </member>
        <member name="T:Cube.DialogIcon">
            
             DialogIcon
            
             <summary>
             Specifies the icon that is displayed by a message box.
             </summary>
            
        </member>
        <member name="F:Cube.DialogIcon.None">
            <summary>The message box contains no symbols.</summary>
        </member>
        <member name="F:Cube.DialogIcon.Error">
            <summary>The message box contains a symbol consisting of white X in a circle with a red background.</summary>
        </member>
        <member name="F:Cube.DialogIcon.Warning">
            <summary>The message box contains a symbol consisting of an exclamation point in a triangle with a yellow background.</summary>
        </member>
        <member name="F:Cube.DialogIcon.Information">
            <summary>The message box contains a symbol consisting of a lowercase letter i in a circle.</summary>
        </member>
        <member name="T:Cube.DialogButtons">
            
             DialogButtons
            
             <summary>
             Specifies the kind of buttons that are displayed by a message box.
             </summary>
            
        </member>
        <member name="F:Cube.DialogButtons.Ok">
            <summary>The message box displays an OK button.</summary>
        </member>
        <member name="F:Cube.DialogButtons.OkCancel">
            <summary>The message box displays OK and Cancel buttons.</summary>
        </member>
        <member name="F:Cube.DialogButtons.YesNo">
            <summary>The message box displays Yes and No buttons.</summary>
        </member>
        <member name="F:Cube.DialogButtons.YesNoCancel">
            <summary>The message box displays Yes, No, and Cancel buttons.</summary>
        </member>
        <member name="T:Cube.DialogStatus">
            
             DialogStatus
            
             <summary>
             Specifies the button that is clicked by a user.
             </summary>
            
        </member>
        <member name="F:Cube.DialogStatus.Empty">
            <summary>The message box returns no result.</summary>
        </member>
        <member name="F:Cube.DialogStatus.Ok">
            <summary>The result value of the message box is OK.</summary>
        </member>
        <member name="F:Cube.DialogStatus.Cancel">
            <summary>The result value of the message box is Cancel.</summary>
        </member>
        <member name="F:Cube.DialogStatus.Yes">
            <summary>The result value of the message box is Yes.</summary>
        </member>
        <member name="F:Cube.DialogStatus.No">
            <summary>The result value of the message box is No.</summary>
        </member>
        <member name="T:Cube.DialogStatusExtension">
            
             DialogStatusExtension
            
             <summary>
             Specifies the button that is clicked by a user.
             </summary>
            
        </member>
        <member name="M:Cube.DialogStatusExtension.Any(Cube.DialogStatus,Cube.DialogStatus,Cube.DialogStatus[])">
            
             Any
            
             <summary>
             Determines whether to match any of the specified values.
             </summary>
            
             <param name="src">Source value.</param>
             <param name="value">Value to be checked.</param>
             <param name="more">Values to be checked.</param>
            
             <returns>true for match; otherwise false.</returns>
            
        </member>
        <member name="T:Cube.FileDialogFilter">
            
             FileDialogFilter
            
             <summary>
             Provides functionality to create a filter description for the
             OpenFileDialog or SaveFileDialog.
             </summary>
            
        </member>
        <member name="M:Cube.FileDialogFilter.#ctor(System.String,System.String[])">
            
             FileDialogFilter
            
             <summary>
             Initializes a new instance of the FileDialogFilter class
             with the specified parameters
             </summary>
            
             <param name="description">Description for the filter.</param>
             <param name="extensions">
             List of target extensions (e.g., ".txt").
             </param>
            
        </member>
        <member name="M:Cube.FileDialogFilter.#ctor(System.String,System.Boolean,System.String[])">
            
             FileDialogFilter
            
             <summary>
             Initializes a new instance of the FileDialogFilter class
             with the specified parameters
             </summary>
            
             <param name="text">Description for the filter.</param>
             <param name="ignoreCase">Ignores case or not.</param>
             <param name="extensions">
             List of target extensions (e.g., ".txt").
             </param>
            
        </member>
        <member name="P:Cube.FileDialogFilter.Text">
            
             Text
            
             <summary>
             Gets a description for the filter.
             </summary>
            
        </member>
        <member name="P:Cube.FileDialogFilter.Targets">
            
             Targets
            
             <summary>
             Gets a list of target extensions.
             </summary>
            
        </member>
        <member name="P:Cube.FileDialogFilter.IgnoreCase">
            
             IgnoreCase
            
             <summary>
             Gets a value indicating whether letter cases of the specified
             extensions are ignored.
             </summary>
            
        </member>
        <member name="M:Cube.FileDialogFilter.ToString">
            
             ToString
            
             <summary>
             Converts to a string representing the filter.
             </summary>
            
        </member>
        <member name="M:Cube.FileDialogFilter.Normalize(System.Collections.Generic.IEnumerable{System.String})">
            
             Normalize
            
             <summary>
             Normalizes the specified extensions.
             </summary>
            
        </member>
        <member name="M:Cube.FileDialogFilter.Format(System.String)">
            
             Format
            
             <summary>
             Converts an extension to a filter string according to the user
             settings.
             </summary>
            
        </member>
        <member name="T:Cube.Message`1">
            
             Message(TValue)
            
             <summary>
             Represents the common message.
             </summary>
            
        </member>
        <member name="P:Cube.Message`1.Text">
            
             Text
            
             <summary>
             Gets or sets a text for the message.
             </summary>
            
        </member>
        <member name="P:Cube.Message`1.Value">
            
             Value
            
             <summary>
             Gets or sets the user defined value.
             </summary>
            
        </member>
        <member name="T:Cube.CancelMessage`1">
            
             CancelMessage
            
             <summary>
             Represents the message with Cancel property.
             </summary>
            
        </member>
        <member name="P:Cube.CancelMessage`1.Cancel">
            
             Cancel
            
             <summary>
             Gets or sets a value indicating whether to cancel the operation.
             </summary>
            
        </member>
        <member name="T:Cube.QueryMessage`2">
            
             QueryMessage(TSource, TValue)
            
             <summary>
             Represents the message that has Query, Value (result), and Cancel
             properties.
             </summary>
            
        </member>
        <member name="P:Cube.QueryMessage`2.Source">
            
             Source
            
             <summary>
             Gets or sets the source information at the time of query.
             </summary>
            
        </member>
        <member name="T:Cube.CloseMessage">
            
             CloseMessage
            
             <summary>
             Represents the message to close the displayed window.
             </summary>
            
        </member>
        <member name="T:Cube.ActivateMessage">
            
             ActivateMessage
            
             <summary>
             Represents the message to activate the target window.
             </summary>
            
        </member>
        <member name="T:Cube.ApplyMessage">
            
             ApplyMessage
            
             <summary>
             Represents the message that is sent when setting the current
             values to the associated model objects.
             </summary>
            
        </member>
        <member name="T:Cube.OpenDirectoryMessage">
            
             OpenDirectoryMessage
            
             <summary>
             Represents information to show the FolderBrowserDialog.
             </summary>
            
        </member>
        <member name="M:Cube.OpenDirectoryMessage.#ctor">
            
             OpenDirectoryMessage
            
             <summary>
             Initializes a new instance of the OpenDirectoryMessage class.
             </summary>
            
        </member>
        <member name="M:Cube.OpenDirectoryMessage.#ctor(System.String)">
            
             OpenDirectoryMessage
            
             <summary>
             Initializes a new instance of the OpenDirectoryMessage class
             with the specified path.
             </summary>
            
             <param name="src">Initial path.</param>
            
        </member>
        <member name="M:Cube.OpenDirectoryMessage.#ctor(Cube.FileSystem.Entity)">
            
             OpenDirectoryMessage
            
             <summary>
             Initializes a new instance of the OpenDirectoryMessage class
             with the specified path.
             </summary>
            
             <param name="src">Entity of the initial path.</param>
            
        </member>
        <member name="P:Cube.OpenDirectoryMessage.NewButton">
            
             NewButton
            
             <summary>
             Gets or sets a value indicating whether the New Folder button
             appears in the FolderBrowserDialog.
             </summary>
            
        </member>
        <member name="T:Cube.OpenFileMessage">
            
             OpenFileMessage
            
             <summary>
             Represents information to show the OpenFileDialog.
             </summary>
            
        </member>
        <member name="M:Cube.OpenFileMessage.#ctor">
            
             OpenFileMessage
            
             <summary>
             Initializes a new instance of the OpenFileMessage class.
             </summary>
            
        </member>
        <member name="M:Cube.OpenFileMessage.#ctor(System.String)">
            
             OpenFileMessage
            
             <summary>
             Initializes a new instance of the OpenFileMessage class with
             the specified arguments.
             </summary>
            
             <param name="src">Initial path.</param>
            
        </member>
        <member name="M:Cube.OpenFileMessage.#ctor(Cube.FileSystem.Entity)">
            
             OpenFileMessage
            
             <summary>
             Initializes a new instance of the OpenFileMessage class with
             the specified arguments.
             </summary>
            
             <param name="src">Entity for the initial path.</param>
            
        </member>
        <member name="P:Cube.OpenFileMessage.Multiselect">
            
             Multiselect
            
             <summary>
             Gets or sets an option indicating whether the OpenFileDialog
             allows users to select multiple files.
             </summary>
            
        </member>
        <member name="M:Cube.OpenFileMessage.GetValue">
            
             GetValue
            
             <summary>
             Gets the first element of the Value property.
             </summary>
            
             <returns>String value.</returns>
            
        </member>
        <member name="T:Cube.OpenOrSaveFileMessage`1">
            
             OpenOrSaveFileMessage(TValue)
            
             <summary>
             Represents shared information to show either the OpenFileDialog
             or SaveFileDialog.
             </summary>
            
        </member>
        <member name="M:Cube.OpenOrSaveFileMessage`1.#ctor(Cube.FileSystem.Entity)">
            
             OpenOrSaveFileMessage
            
             <summary>
             Initializes a new instance of the OpenOrSaveFileMessage class
             with the specified arguments.
             </summary>
            
             <param name="src">Entity of the initial path.</param>
            
        </member>
        <member name="P:Cube.OpenOrSaveFileMessage`1.CheckPathExists">
            
             CheckPathExists
            
             <summary>
             Gets or sets a value indicating whether a file dialog
             displays a warning if the user specifies a file name that
             does not exist.
             </summary>
            
        </member>
        <member name="P:Cube.OpenOrSaveFileMessage`1.InitialDirectory">
            
             InitialDirectory
            
             <summary>
             Gets or sets the initial directory that is displayed by a file
             dialog.
             </summary>
            
        </member>
        <member name="P:Cube.OpenOrSaveFileMessage`1.Filters">
            
             Filter
            
             <summary>
             Gets or sets the filter string that determines what types of
             files are displayed from a from dialog.
             </summary>
            
        </member>
        <member name="M:Cube.OpenOrSaveFileMessage`1.GetFilterText">
            
             GetFilterText
            
             <summary>
             Gets the filter text.
             </summary>
            
             <returns>Filter text.</returns>
            
        </member>
        <member name="M:Cube.OpenOrSaveFileMessage`1.GetFilterIndex">
            
             GetFilterIndex
            
             <summary>
             Gets the filter index.
             </summary>
            
             <returns>Filter index.</returns>
            
        </member>
        <member name="M:Cube.OpenOrSaveFileMessage`1.GetValue">
            
             GetValue
            
             <summary>
             Gets the value.
             </summary>
            
             <returns>String value.</returns>
            
        </member>
        <member name="T:Cube.SaveFileMessage">
            
             SaveFileMessage
            
             <summary>
             Represents information to show the SaveFileDialog.
             </summary>
            
        </member>
        <member name="M:Cube.SaveFileMessage.#ctor">
            
             SaveFileMessage
            
             <summary>
             Initializes a new instance of the SaveFileMessage class.
             </summary>
            
        </member>
        <member name="M:Cube.SaveFileMessage.#ctor(System.String)">
            
             SaveFileMessage
            
             <summary>
             Initializes a new instance of the SaveFileMessage class with
             the specified arguments.
             </summary>
            
             <param name="src">Initial path.</param>
            
        </member>
        <member name="M:Cube.SaveFileMessage.#ctor(Cube.FileSystem.Entity)">
            
             SaveFileMessage
            
             <summary>
             Initializes a new instance of the SaveFileMessage class with
             the specified arguments.
             </summary>
            
             <param name="src">Entity for the initial path.</param>
            
        </member>
        <member name="P:Cube.SaveFileMessage.OverwritePrompt">
            
             OverwritePrompt
            
             <summary>
             Gets or sets a value indicating whether SaveFileDialog displays
             a warning if the user specifies the name of a file that already
             exists.
             </summary>
            
        </member>
        <member name="M:Cube.SaveFileMessage.GetValue">
            
             GetValue
            
             <summary>
             Gets the value of Value property.
             </summary>
            
             <returns>String value.</returns>
            
        </member>
        <member name="T:Cube.Mixin.Assembly.Extension">
            
             Extension
            
             <summary>
             Provides extended methods of the Assembly class.
             </summary>
            
        </member>
        <member name="M:Cube.Mixin.Assembly.Extension.GetVersion(System.Reflection.Assembly)">
            
             GetVersion
            
             <summary>
             Gets the version information of the specified assembly.
             </summary>
            
             <param name="src">Assembly object.</param>
            
             <returns>Version object.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Assembly.Extension.GetSoftwareVersion(System.Reflection.Assembly)">
            
             GetSoftwareVersion
            
             <summary>
             Gets the version information of the specified assembly.
             </summary>
            
             <param name="src">Assembly object.</param>
            
             <returns>SoftwareVersion object.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Assembly.Extension.GetVersionString(System.Reflection.Assembly,System.Int32,System.Boolean)">
            
             GetVersionString
            
             <summary>
             Gets the version string of the specified assembly.
             </summary>
            
             <param name="src">Assembly object.</param>
             <param name="digit">Number of display digits</param>
             <param name="architecture">
             Indicates whether the architecture identification is displayed.
             </param>
            
             <returns>Version string.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Assembly.Extension.GetNameString(System.Reflection.Assembly)">
            
             GetNameString
            
             <summary>
             Gets the name of the specified assembly.
             </summary>
            
             <param name="src">Assembly object.</param>
            
             <returns>String value of the assembly name.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Assembly.Extension.GetLocation(System.Reflection.Assembly)">
            
             GetLocation
            
             <summary>
             Gets the path that is the specified assembly is located.
             </summary>
            
             <param name="src">Assembly object.</param>
            
             <returns>Path of the location.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Assembly.Extension.GetFileName(System.Reflection.Assembly)">
            
             GetDirectoryName
            
             <summary>
             Gets the filename of the specified assembly.
             </summary>
            
             <param name="src">Assembly object.</param>
            
             <returns>Filename value.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Assembly.Extension.GetDirectoryName(System.Reflection.Assembly)">
            
             GetDirectoryName
            
             <summary>
             Gets the directory path that the specified assembly is located.
             </summary>
            
             <param name="src">Assembly object.</param>
            
             <returns>Path of the located directory.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Assembly.Extension.GetTitle(System.Reflection.Assembly)">
            
             GetTitle
            
             <summary>
             Gets the title of the specified assembly.
             </summary>
            
             <param name="src">Assembly object.</param>
            
             <returns>Title value.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Assembly.Extension.GetDescription(System.Reflection.Assembly)">
            
             GetDescription
            
             <summary>
             Gets the description of the specified assembly.
             </summary>
            
             <param name="src">Assembly object.</param>
            
             <returns>Description value.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Assembly.Extension.GetCompany(System.Reflection.Assembly)">
            
             GetCompany
            
             <summary>
             Gets the company name of the specified assembly.
             </summary>
            
             <param name="src">Assembly object.</param>
            
             <returns>Company name.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Assembly.Extension.GetProduct(System.Reflection.Assembly)">
            
             GetProduct
            
             <summary>
             Gets the product name of the specified assembly.
             </summary>
            
             <param name="src">Assembly object.</param>
            
             <returns>Product name.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Assembly.Extension.GetCopyright(System.Reflection.Assembly)">
            
             GetCopyright
            
             <summary>
             Gets the copyright description of the specified assembly.
             </summary>
            
             <param name="src">Assembly object.</param>
            
             <returns>Copyright description.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Assembly.Extension.GetTrademark(System.Reflection.Assembly)">
            
             GetTrademark
            
             <summary>
             Gets the trademark description of the specified assembly.
             </summary>
            
             <param name="src">Assembly object.</param>
            
             <returns>Trademark description.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Assembly.Extension.GetConfiguration(System.Reflection.Assembly)">
            
             GetConfiguration
            
             <summary>
             Gets the configuration value of the specified assembly.
             </summary>
            
             <param name="src">Assembly object.</param>
            
             <returns>Configuration value.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Assembly.Extension.GetCulture(System.Reflection.Assembly)">
            
             GetCulture
            
             <summary>
             Gets the culture value of the specified assembly.
             </summary>
            
             <param name="src">Assembly object.</param>
            
             <returns>Culture value.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Assembly.Extension.GetArchitecture(System.Reflection.Assembly)">
            
             GetArchitecture
            
             <summary>
             Gets the architecture value of the specified assembly.
             </summary>
            
             <param name="src">Assembly object.</param>
            
             <returns>32bit or 64bit</returns>
            
        </member>
        <member name="M:Cube.Mixin.Assembly.Extension.Get``1(System.Reflection.Assembly)">
            
             Get
            
             <summary>
             Gets the object by using the GetCustomAttribute method.
             </summary>
            
        </member>
        <member name="M:Cube.Mixin.Assembly.Extension.Unify(System.String)">
            
             Unify
            
             <summary>
             Converts a null or empty string to the empty one.
             </summary>
            
        </member>
        <member name="T:Cube.Mixin.ByteFormat.Extension">
            
             Extension
            
             <summary>
             Provides extended methods to convert the byte size to pretty
             readable string.
             </summary>
            
        </member>
        <member name="M:Cube.Mixin.ByteFormat.Extension.ToPrettyBytes(System.Int64)">
            
             ToPrettyBytes
            
             <summary>
             Convert the specified byte size to pretty readable string.
             </summary>
            
             <param name="bytes">Byte size.</param>
            
             <returns>String that represents the byte size.</returns>
            
        </member>
        <member name="M:Cube.Mixin.ByteFormat.Extension.ToRoughBytes(System.Int64)">
            
             ToRoughBytes
            
             <summary>
             Convert the specified byte size to readable string in an
             Explorer manner.
             </summary>
            
             <param name="bytes">Byte size.</param>
            
             <returns>String that represents the byte size.</returns>
            
        </member>
        <member name="T:Cube.Mixin.Collections.DictionaryExtension">
            
             DictionaryExtension
            
             <summary>
             Provides extended methods of the IDictionary(T, U) class.
             </summary>
            
        </member>
        <member name="M:Cube.Mixin.Collections.DictionaryExtension.AddOrSet``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            
             AddOrSet(T, U)
            
             <summary>
             Adds or sets the specified key-value pair.
             </summary>
            
             <param name="src">Dictionary collection.</param>
             <param name="key">Key element to be set.</param>
             <param name="value">Value element to be set.</param>
            
        </member>
        <member name="M:Cube.Mixin.Collections.DictionaryExtension.AddOrSet``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1,System.Func{``1,``1,``1})">
            
             AddOrSet(T, U)
            
             <summary>
             Adds or sets the specified key-value pair.
             </summary>
            
             <param name="src">Dictionary collection.</param>
             <param name="key">Key element to be set.</param>
             <param name="value">Value element to be set.</param>
             <param name="selector">
             Function object to select which value is set.
             </param>
            
        </member>
        <member name="T:Cube.Mixin.Collections.DifferenceExtension">
            
             DifferenceExtension
            
             <summary>
             Provides extended methods to get diff between the two sequences.
             </summary>
            
        </member>
        <member name="M:Cube.Mixin.Collections.DifferenceExtension.Diff``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            
             Diff(T)
            
             <summary>
             Returns diff between the two sequences.
             </summary>
            
             <param name="newer">Newer sequence.</param>
             <param name="older">Older sequence.</param>
            
             <returns>Diff result.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Collections.DifferenceExtension.Diff``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},Cube.Collections.Differences.Condition)">
            
             Diff(T)
            
             <summary>
             Returns diff between the two sequences.
             </summary>
            
             <param name="newer">Newer sequence.</param>
             <param name="older">Older sequence.</param>
             <param name="mask">Mask to filter the results.</param>
            
             <returns>Diff result.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Collections.DifferenceExtension.Diff``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            
             Diff(T)
            
             <summary>
             Returns diff between the two sequences.
             </summary>
            
             <param name="newer">Newer sequence.</param>
             <param name="older">Older sequence.</param>
             <param name="comparer">Comparer object.</param>
            
             <returns>Diff result.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Collections.DifferenceExtension.Diff``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},Cube.Collections.Differences.Condition)">
            
             Diff(T)
            
             <summary>
             Returns diff between the two sequences.
             </summary>
            
             <param name="newer">Newer sequence.</param>
             <param name="older">Older sequence.</param>
             <param name="comparer">Comparer object.</param>
             <param name="mask">Mask to filter the results.</param>
            
             <returns>Diff result.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Collections.DifferenceExtension.Diff``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})">
            
             Diff(T)
            
             <summary>
             Returns diff between the two sequences.
             </summary>
            
             <param name="newer">Newer sequence.</param>
             <param name="older">Older sequence.</param>
             <param name="compare">Function to compare each element.</param>
            
             <returns>Diff result.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Collections.DifferenceExtension.Diff``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean},Cube.Collections.Differences.Condition)">
            
             Diff(T)
            
             <summary>
             Returns diff between the two sequences.
             </summary>
            
             <param name="newer">Newer sequence.</param>
             <param name="older">Older sequence.</param>
             <param name="compare">Function to compare each element.</param>
             <param name="mask">Mask to filter the results.</param>
            
             <returns>Diff result.</returns>
            
        </member>
        <member name="T:Cube.Mixin.Collections.EnumerableExtension">
            
             EnumerableExtension
            
             <summary>
             Provides extended methods of the IEnumerable(T) class.
             </summary>
            
        </member>
        <member name="M:Cube.Mixin.Collections.EnumerableExtension.GetOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            
             GetOrEmpty(T)
            
             <summary>
             Returns the specified object or empty IEnumerable(T) object.
             </summary>
            
             <param name="src">Source collection.</param>
            
             <returns>Self or empty collection.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Collections.EnumerableExtension.Compact``1(System.Collections.Generic.IEnumerable{``0})">
            
             Compact
            
             <summary>
             Removes null objects in the specified sequence.
             </summary>
            
             <param name="src">Source sequence.</param>
            
             <returns>Removed sequence.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Collections.EnumerableExtension.Concat``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            
             Concat
            
             <summary>
             Combines the specified items to the end of the specified source
             sequence.
             </summary>
            
             <param name="src">Source sequence.</param>
             <param name="items">Items to be combined.</param>
            
             <returns>Combined sequence.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Collections.EnumerableExtension.Join``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Func{``0,System.String})">
            
             Join
            
             <summary>
             Combines the specified sequence with the specified separator.
             </summary>
            
             <param name="src">Source sequence.</param>
             <param name="separator">Concat separator.</param>
             <param name="formatter">Function to convert to string.</param>
            
             <returns>Combined string.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Collections.EnumerableExtension.Join(System.Collections.Generic.IEnumerable{System.String},System.String)">
            
             Join
            
             <summary>
             Combines the specified string sequence with the specified
             separator.
             </summary>
            
             <param name="src">Source sequence.</param>
             <param name="separator">Concat separator.</param>
            
             <returns>Combined string.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Collections.EnumerableExtension.FirstIndex``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            
             FirstIndex(T)
            
             <summary>
             Returns the first index of a sequence that satisfies a
             specified condition.
             </summary>
            
             <param name="src">Source sequence.</param>
             <param name="predicate">
             Function to test each element for a condition.
             </param>
            
             <returns>
             -1 if the sequence is empty or if no elements pass the test
             in the predicate function; otherwise, the first index that
             passes the test in the predicate function.
             </returns>
            
        </member>
        <member name="M:Cube.Mixin.Collections.EnumerableExtension.LastIndex``1(System.Collections.Generic.IEnumerable{``0})">
            
             LastIndex(T)
            
             <summary>
             Returns the last index of the specified sequence.
             </summary>
            
             <param name="src">Source sequence.</param>
            
             <returns>
             -1 if the sequence is empty; otherwise, the last index in the
             sequence.
             </returns>
            
        </member>
        <member name="M:Cube.Mixin.Collections.EnumerableExtension.LastIndex``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            
             LastIndex(T)
            
             <summary>
             Returns the last index of a sequence that satisfies a
             specified condition.
             </summary>
            
             <param name="src">Source sequence.</param>
             <param name="predicate">
             Function to test each element for a condition.
             </param>
            
             <returns>
             -1 if the sequence is empty or if no elements pass the test
             in the predicate function; otherwise, the Last index that
             passes the test in the predicate function.
             </returns>
            
        </member>
        <member name="M:Cube.Mixin.Collections.EnumerableExtension.Clamp``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            
             Clamp(T)
            
             <summary>
             Normalizes the specified index with the range of [0, Count).
             </summary>
            
             <param name="src">Source sequence.</param>
             <param name="index">Index value.</param>
            
             <returns>Normalized index.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Collections.EnumerableExtension.Flatten``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
            
             Flatten
            
             <summary>
             Convert a tree structure to a one-dimensional sequence with
             breadth first search..
             </summary>
            
             <param name="src">Source sequence.</param>
             <param name="func">Conversion function.</param>
            
             <returns>Converted sequence.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Collections.EnumerableExtension.Flatten``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0}})">
            
             Flatten
            
             <summary>
             Convert a tree structure to a one-dimensional sequence with
             breadth first search..
             </summary>
            
        </member>
        <member name="T:Cube.Mixin.Collections.Generic.Extension">
            
             Extension
            
             <summary>
             Provides extended methods about the IEnumerable(T) class.
             </summary>
            
        </member>
        <member name="M:Cube.Mixin.Collections.Generic.Extension.ToEnumerable``1(``0)">
            
             ToEnumerable(T)
            
             <summary>
             Converts the specified type T object to IEnumerable(T) object.
             </summary>
            
             <param name="src">Source value.</param>
            
             <returns>Collection that has only the specified value.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Collections.Generic.Extension.Concat``1(``0,``0[])">
            
             Concat
            
             <summary>
             Combines the specified items to the end of the specified source.
             </summary>
            
             <param name="src">First item.</param>
             <param name="items">Items to be combined.</param>
            
             <returns>Combined sequence.</returns>
            
        </member>
        <member name="T:Cube.Mixin.Collections.IndicesExtension">
            
             IndicesExtension
            
             <summary>
             Provides extended methods of the IEnumerable(int) class.
             </summary>
            
        </member>
        <member name="M:Cube.Mixin.Collections.IndicesExtension.OrderBy(System.Collections.Generic.IEnumerable{System.Int32})">
            
             OrderBy
            
             <summary>
             Sorts the elements of a sequence in ascending order.
             </summary>
            
             <param name="src">Source sequence.</param>
            
             <returns>
             IEnumerable(int) whose elements are sorted.
             </returns>
            
        </member>
        <member name="M:Cube.Mixin.Collections.IndicesExtension.OrderByDescending(System.Collections.Generic.IEnumerable{System.Int32})">
            
             OrderByDescending
            
             <summary>
             Sorts the elements of a sequence in descending order.
             </summary>
            
             <param name="src">Source sequence.</param>
            
             <returns>
             IEnumerable(int) whose elements are sorted.
             </returns>
            
        </member>
        <member name="M:Cube.Mixin.Collections.IndicesExtension.Within(System.Collections.Generic.IEnumerable{System.Int32},System.Int32,System.Int32)">
            
             Within
            
             <summary>
             Gets the elements of a sequence that is within the range of
             [begin, end).
             </summary>
            
             <param name="src">Source sequence.</param>
             <param name="begin">Lower limit of the range.</param>
             <param name="end">
             Upper limit of the range (The value is not included).
             </param>
            
             <returns>
             IEnumerable(int) whose elements are within the [begin, end).
             </returns>
            
        </member>
        <member name="M:Cube.Mixin.Collections.IndicesExtension.Within(System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
            
             Within
            
             <summary>
             Gets the elements of a sequence that is within the range of
             [0, n).
             </summary>
            
             <param name="src">Source sequence.</param>
             <param name="n">
             Upper limit of the range (The value is not included).
             </param>
            
             <returns>
             IEnumerable(int) whose elements are within the [0, n).
             </returns>
            
        </member>
        <member name="T:Cube.Mixin.Iteration.Extension">
            
             Extension
            
             <summary>
             Provides extended methods about iteration.
             </summary>
            
        </member>
        <member name="M:Cube.Mixin.Iteration.Extension.Make``1(System.Int32,System.Func{System.Int32,``0})">
            
             Make
            
             <summary>
             Makes the specified number of sequence with the specified
             function.
             </summary>
            
             <param name="n">Number of sequence.</param>
             <param name="func">Function to create an element.</param>
            
        </member>
        <member name="T:Cube.Mixin.Environment.Extension">
            
             Extension
            
             <summary>
             Provides extended methods of the Environment class.
             </summary>
            
        </member>
        <member name="M:Cube.Mixin.Environment.Extension.GetName(System.Environment.SpecialFolder)">
            
             GetName
            
             <summary>
             Gets the directory name corresponding to the specified value.
             </summary>
            
             <param name="src">
             Value that represents the special folder.
             </param>
            
             <returns>Directory name.</returns>
            
        </member>
        <member name="T:Cube.Mixin.Generic.Extension">
            
             Extension
            
             <summary>
             Provides extended methods of generic classes.
             </summary>
            
        </member>
        <member name="M:Cube.Mixin.Generic.Extension.TryCast``1(System.Object)">
            
             TryCast
            
             <summary>
             Tries to cast the specified object to the specified type.
             </summary>
            
             <typeparam name="T">Type to be cast.</typeparam>
            
             <param name="src">Source object.</param>
            
             <returns>Casted object.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Generic.Extension.TryCast``1(System.Object,``0)">
            
             TryCast
            
             <summary>
             Tries to cast the specified object to the specified type.
             </summary>
            
             <typeparam name="T">Type to be cast.</typeparam>
            
             <param name="src">Source object.</param>
             <param name="error">
             Returned object when the cast is failed.
             </param>
            
             <returns>Casted object.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Generic.Extension.Copy``1(``0)">
            
             Copy
            
             <summary>
             Creates a new instance of the type T class and copies values
             from public properties and fields of the specified object.
             </summary>
            
             <typeparam name="T">Type of object to be created.</typeparam>
            
             <param name="src">Object to be copied.</param>
            
             <returns>Created object.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Generic.Extension.Assign``1(``0,``0)">
            
             Assign
            
             <summary>
             Assigns the public properties and fields of the specified source
             object to the destination object.
             </summary>
            
             <param name="dest">Object to be assigned.</param>
             <param name="src">Object to assign.</param>
            
        </member>
        <member name="M:Cube.Mixin.Generic.Extension.Set``1(System.Collections.Generic.IEqualityComparer{``0},``0@,``0)">
            
             Set
            
             <summary>
             Sets the specified value to the specified field if they are
             not equal.
             </summary>
            
             <typeparam name="T">
             Type of object to compare and set.
             </typeparam>
            
             <param name="src">Function to compare.</param>
             <param name="field">Reference to the target field.</param>
             <param name="value">Value being set.</param>
            
             <returns>True for done; false for cancel.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Generic.Extension.CopyWithBinaryFormatter``1(``0)">
            
             CopyWithBinaryFormatter
            
             <summary>
             Copies values of properties and fields from the specified object
             with the BinaryFormatter object.
             </summary>
            
        </member>
        <member name="T:Cube.Mixin.Observing.Extension">
            
             Extension
            
             <summary>
             Provides extended methods of IObservePropertyChanged and its
             implemented classes.
             </summary>
            
        </member>
        <member name="M:Cube.Mixin.Observing.Extension.Subscribe(System.ComponentModel.INotifyPropertyChanged,System.Action{System.String})">
            
             Subscribe
            
             <summary>
             Associates the specified callback to the PropertyChanged event.
             </summary>
            
             <param name="src">Observable source.</param>
             <param name="callback">
             Action to invoked when the PropertyChanged event is fired.
             </param>
            
             <returns>
             Object to remove the callback from the PropertyChanged event
             handler.
             </returns>
            
        </member>
        <member name="M:Cube.Mixin.Observing.Extension.Hook``1(``0,System.ComponentModel.INotifyPropertyChanged,System.String[])">
            
             Hook
            
             <summary>
             Observes the specified observer and the specified object.
             </summary>
            
             <param name="src">Source observer.</param>
             <param name="obj">Object to be observed.</param>
             <param name="names">Target property names.</param>
            
             <returns>Source observer.</returns>
            
        </member>
        <member name="T:Cube.Mixin.Registry.Extension">
            
             Extension
            
             <summary>
             Provides extended methods of the Registry and related classes.
             </summary>
            
        </member>
        <member name="M:Cube.Mixin.Registry.Extension.SetValue``1(Microsoft.Win32.RegistryKey,System.String,System.String,``0)">
            
             SetValue
            
             <summary>
             Sets the specified value.
             </summary>
            
             <param name="src">Root key of the target registry.</param>
             <param name="subkey">Name of the registry subkey.</param>
             <param name="name">Name of the setting value.</param>
             <param name="value">Value to be set.</param>
            
        </member>
        <member name="M:Cube.Mixin.Registry.Extension.GetValue``1(Microsoft.Win32.RegistryKey,System.String,System.String)">
            
             GetValue
            
             <summary>
             Gets a value of type T from the specified arguments.
             </summary>
            
             <param name="src">Root key of the target registry.</param>
             <param name="subkey">Name of the registry subkey.</param>
             <param name="name">Name of the getting value.</param>
            
             <returns>Value of type T.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Registry.Extension.GetValue``1(Microsoft.Win32.RegistryKey,System.String,System.String,``0)">
            
             GetValue
            
             <summary>
             Gets a value of type T from the specified arguments.
             </summary>
            
             <param name="src">Root key of the target registry.</param>
             <param name="subkey">Name of the registry subkey.</param>
             <param name="name">Name of the getting value.</param>
             <param name="defaultValue">
             Value to be used when the specified subkey or name does not exist.
             </param>
            
             <returns>Value of type T.</returns>
            
        </member>
        <member name="T:Cube.Mixin.String.Extension">
            
             Extension
            
             <summary>
             Provides extended methods for the string class.
             </summary>
            
        </member>
        <member name="M:Cube.Mixin.String.Extension.HasValue(System.String)">
            
             HasValue
            
             <summary>
             Gets a value indicating whether the specified string contains
             one or more character.
             </summary>
            
             <param name="src">Source string.</param>
            
             <returns>true for containing one or more character.</returns>
            
        </member>
        <member name="M:Cube.Mixin.String.Extension.Unify(System.String)">
            
             Unify
            
             <summary>
             Converts a null or empty string to the empty one.
             </summary>
            
             <param name="src">Source string.</param>
            
             <returns>Converted string.</returns>
            
        </member>
        <member name="M:Cube.Mixin.String.Extension.Quote(System.String)">
            
             Quote
            
             <summary>
             Quotes the specified string.
             </summary>
            
             <param name="src">Source string.</param>
            
             <returns>Quoted string.</returns>
            
        </member>
        <member name="M:Cube.Mixin.String.Extension.FuzzyEquals(System.String,System.String)">
            
             FuzzyEquals
            
             <summary>
             Compares the specified string objects in ignoring case.
             </summary>
            
             <param name="src">Source string.</param>
             <param name="cmp">String to compare.</param>
            
             <returns>true for equal; otherwise false.</returns>
            
        </member>
        <member name="M:Cube.Mixin.String.Extension.FuzzyStartsWith(System.String,System.String)">
            
             FuzzyStartsWith
            
             <summary>
             Determines whether the beginning of this string instance
             matches the specified string in ignoring case.
             </summary>
            
             <param name="src">Source string.</param>
             <param name="cmp">String to compare.</param>
            
             <returns>true for match; otherwise, false.</returns>
            
        </member>
        <member name="M:Cube.Mixin.String.Extension.FuzzyEndsWith(System.String,System.String)">
            
             FuzzyStartsWith
            
             <summary>
             Determines whether the end of this string instance matches the
             specified string in ignoring case.
             </summary>
            
             <param name="src">Source string.</param>
             <param name="cmp">String to compare.</param>
            
             <returns>true for match; otherwise, false.</returns>
            
        </member>
        <member name="T:Cube.Mixin.Syntax.Extension">
            
             Extension
            
             <summary>
             Provides extended methods to describe basic syntax (if, for, and
             more) as an expression.
             </summary>
            
             <remarks>
             We assume that these extended methods are mainly used for the
             expression body definition.
             </remarks>
            
        </member>
        <member name="M:Cube.Mixin.Syntax.Extension.Then(System.Boolean,System.Action)">
            
             Then
            
             <summary>
             Executes the specified action if the specified value is true.
             </summary>
            
             <param name="value">true of false.</param>
             <param name="action">
             Action to be invoked if the value is true.
             </param>
            
        </member>
        <member name="M:Cube.Mixin.Syntax.Extension.Times(System.Int32,System.Action{System.Int32})">
            
             Times
            
             <summary>
             Executes the specified action in the specified number of times.
             </summary>
            
             <param name="n">Number of times.</param>
             <param name="action">User action.</param>
            
        </member>
        <member name="M:Cube.Mixin.Syntax.Extension.Each``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            
             Each
            
             <summary>
             Executes the specified action on each item of the specified
             sequence.
             </summary>
            
             <param name="src">Source sequence.</param>
             <param name="action">User action.</param>
            
        </member>
        <member name="M:Cube.Mixin.Syntax.Extension.Try(System.Int32,System.Action{System.Int32})">
            
             Try
            
             <summary>
             Tries the specified action up to the specified number of times
             until the action succeeds.
             </summary>
            
             <param name="n">Number of trials.</param>
             <param name="action">User action.</param>
            
        </member>
        <member name="M:Cube.Mixin.Syntax.Extension.Try(System.Int32,System.Action{System.Int32},System.Action{System.Int32,System.Exception})">
            
             Try
            
             <summary>
             Tries the specified action up to the specified number of times
             until the action succeeds.
             </summary>
            
             <param name="n">Number of trials.</param>
             <param name="action">User action.</param>
             <param name="error">
             Action to be invoked when an exception occurs.
             </param>
            
        </member>
        <member name="T:Cube.Mixin.Tasks.Extension">
            
             Extension
            
             <summary>
             Provides extended methods of the Task and related classes.
             </summary>
            
        </member>
        <member name="M:Cube.Mixin.Tasks.Extension.Forget(System.Threading.Tasks.Task)">
            
             Forget
            
             <summary>
             Executes the specified task in the Fire&amp;Forget pattern.
             </summary>
            
             <param name="src">Source object.</param>
            
        </member>
        <member name="M:Cube.Mixin.Tasks.Extension.Timeout(System.Threading.Tasks.Task,System.TimeSpan)">
            
             Timeout
            
             <summary>
             Sets a timeout of executing the specified task.
             </summary>
            
             <param name="src">Source object.</param>
             <param name="value">Timeout value.</param>
            
             <returns>Task object.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Tasks.Extension.Timeout``1(System.Threading.Tasks.Task{``0},System.TimeSpan)">
            
             Timeout
            
             <summary>
             Sets a timeout of executing the specified task.
             </summary>
            
             <param name="src">Source object.</param>
             <param name="value">Timeout value.</param>
            
             <returns>Task(T) object.</returns>
            
        </member>
        <member name="T:Cube.Mixin.Time.Extension">
            
             Extension
            
             <summary>
             Provides extended methods of the DateTime and related classes.
             </summary>
            
        </member>
        <member name="M:Cube.Mixin.Time.Extension.ToUnixTime(System.DateTime)">
            
             ToUnixTime
            
             <summary>
             Converts the specified DateTime object to the UNIX time.
             </summary>
            
             <param name="src">Source object.</param>
            
             <returns>Converted UNIX time.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Time.Extension.ToUniversalTime(System.Int64)">
            
             ToUniversalTime
            
             <summary>
             Converts the specified UNIX time to the DateTime object.
             </summary>
            
             <param name="unix">UNIX time.</param>
            
             <returns>Converted object.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Time.Extension.ToUniversalTime(System.Int32)">
            
             ToUniversalTime
            
             <summary>
             Converts the specified UNIX time to the DateTime object.
             </summary>
            
             <param name="unix">UNIX time.</param>
            
             <returns>Converted object.</returns>
            
             <remarks>
             Due to the nature of int, only dates and times up to
             2106/02/07T06:28:15+0:00 can be expressed.
             </remarks>
            
        </member>
        <member name="M:Cube.Mixin.Time.Extension.ToUniversalTime(System.String,System.String)">
            
             ToUniversalTime
            
             <summary>
             Creates a new instance of the DateTime structure with the
             specified value and format.
             </summary>
            
             <param name="src">String value that represents the time.</param>
             <param name="format">Conversion format.</param>
            
             <returns>DateTime object.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Time.Extension.ToLocalTime(System.Int64)">
            
             ToLocalTime
            
             <summary>
             Converts the specified UNIX time to the DateTime object.
             </summary>
            
             <param name="unix">UNIX time.</param>
            
             <returns>Converted object.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Time.Extension.ToLocalTime(System.Int32)">
            
             ToLocalTime
            
             <summary>
             Converts the specified UNIX time to the DateTime object.
             </summary>
            
             <param name="unix">UNIX time.</param>
            
             <returns>Converted object.</returns>
            
             <remarks>
             Due to the nature of int, only dates and times up to
             2106/02/07T06:28:15+0:00 can be expressed.
             </remarks>
            
        </member>
        <member name="M:Cube.Mixin.Time.Extension.ToLocalTime(System.String,System.String)">
            
             ToLocalTime
            
             <summary>
             Creates a new instance of the DateTime structure with the
             specified value and format.
             </summary>
            
             <param name="src">String value that represents the time.</param>
             <param name="format">Conversion format.</param>
            
             <returns>DateTime object.</returns>
            
        </member>
        <member name="T:Cube.Mixin.Uri.Extension">
            
             Extension
            
             <summary>
             Provides extended methods of th Uri class.
             </summary>
            
        </member>
        <member name="M:Cube.Mixin.Uri.Extension.ToUri(System.String)">
            
             ToUri
            
             <summary>
             Creates a new instance of the Uri class with the specified
             string.
             </summary>
            
             <param name="src">String that represents a URL.</param>
            
             <returns>Uri object.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Uri.Extension.With(System.Uri,System.Collections.Generic.IDictionary{System.String,System.String})">
            
             With
            
             <summary>
             Combines the specified Uri object and queries.
             </summary>
            
             <param name="src">Source URL.</param>
             <param name="query">Queries to be combined.</param>
            
             <returns>Combined Uri object.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Uri.Extension.With``1(System.Uri,System.String,``0)">
            
             With
            
             <summary>
             Combines the specified Uri object and key-value query.
             </summary>
            
             <param name="src">Source URL.</param>
             <param name="key">Key of the query.</param>
             <param name="value">Value of the query.</param>
            
             <returns>Combined Uri object.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Uri.Extension.With(System.Uri,System.DateTime)">
            
             With
            
             <summary>
             Combines the specified Uri object and date time.
             </summary>
            
             <param name="src">Source URL.</param>
             <param name="time">Date time value.</param>
            
             <returns>Combined Uri object.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Uri.Extension.With(System.Uri,Cube.SoftwareVersion)">
            
             With
            
             <summary>
             Combines the specified Uri object and version information.
             </summary>
            
             <param name="src">Source URL.</param>
             <param name="version">Version information.</param>
            
             <returns>Combined Uri object.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Uri.Extension.With(System.Uri,System.Reflection.Assembly)">
            
             With
            
             <summary>
             Combines the specified Uri object and version information of
             the specified assembly.
             </summary>
            
             <param name="src">Source URL.</param>
             <param name="asm">Assembly object.</param>
            
             <returns>Combined Uri object.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Uri.Extension.With(System.Uri,Cube.Utm)">
            
             With
            
             <summary>
             Combines the specified Uri object and UTM queries.
             </summary>
            
             <param name="src">Source URL.</param>
             <param name="utm">UTM queries.</param>
            
             <returns>Combined Uri object.</returns>
            
        </member>
        <member name="M:Cube.Mixin.Uri.Extension.WithoutQuery(System.Uri)">
            
             WithoutQuery
            
             <summary>
             Gets the Uri object that is removed queries from the specified
             one.
             </summary>
            
             <param name="src">Source URL.</param>
            
             <returns>Uri object that is removed queries.</returns>
            
        </member>
        <member name="T:Cube.Utm">
            
             Utm
            
             <summary>
             Represents the properties that are used in the Google Analytics
             service.
             </summary>
            
             <seealso href="https://support.google.com/analytics/answer/1033863" />
            
        </member>
        <member name="P:Cube.Utm.Source">
            
             Source
            
             <summary>
             Gets or sets a value to identify the advertiser, site,
             publication, etc. that is sending traffic to your property.
             </summary>
            
        </member>
        <member name="P:Cube.Utm.Medium">
            
             Medium
            
             <summary>
             Gets or sets a value of the advertising or marketing medium.
             </summary>
            
        </member>
        <member name="P:Cube.Utm.Campaign">
            
             Campaign
            
             <summary>
             Gets or sets a value of the individual campaign name, slogan,
             promo code, etc. for a product.
             </summary>
            
        </member>
        <member name="P:Cube.Utm.Term">
            
             Term
            
             <summary>
             Gets or sets a value to identify paid search keywords.
             </summary>
            
        </member>
        <member name="P:Cube.Utm.Content">
            
             Content
            
             <summary>
             Gets or sets a value that is used to differentiate similar
             content, or links within the same ad.
             </summary>
            
        </member>
        <member name="T:Cube.IImageList">
            
             IImageList
            
             <summary>
             https://msdn.microsoft.com/en-us/library/windows/desktop/bb761490.aspx
             </summary>
            
        </member>
        <member name="T:Cube.ImageInfo">
            
             ImageInfo
            
             <summary>
             https://msdn.microsoft.com/en-us/library/windows/desktop/bb761393.aspx
             </summary>
            
        </member>
        <member name="T:Cube.ImageListDrawParams">
            
             ImageListDrawParams
            
             <summary>
             https://msdn.microsoft.com/en-us/library/windows/desktop/bb761395.aspx
             </summary>
            
        </member>
        <member name="T:Cube.IShellLink">
            
             IShellLink
            
             <summary>
             https://msdn.microsoft.com/en-us/library/windows/desktop/bb774950.aspx
             </summary>
            
        </member>
        <member name="T:Cube.Shell32.NativeMethods">
            
             Shell32.NativeMethods
            
             <summary>
             Provides native methods defined in the shell32.dll.
             </summary>
            
        </member>
        <member name="M:Cube.Shell32.NativeMethods.SHGetFileInfo(System.String,System.UInt32,Cube.ShFileIinfo@,System.UInt32,System.UInt32)">
            
             SHGetFileInfo
            
             <summary>
             https://msdn.microsoft.com/en-us/library/windows/desktop/bb762179.aspx
             </summary>
            
        </member>
        <member name="M:Cube.Shell32.NativeMethods.SHGetStockIconInfo(System.UInt32,System.UInt32,Cube.ShStockIconInfo@)">
            
             SHGetStockIconInfo
            
             <summary>
             https://msdn.microsoft.com/en-us/library/windows/desktop/bb762205.aspx
             </summary>
            
        </member>
        <member name="M:Cube.Shell32.NativeMethods.SHGetImageList(System.UInt32,System.Guid,Cube.IImageList@)">
            
             SHGetImageList
            
             <summary>
             https://msdn.microsoft.com/en-us/library/windows/desktop/bb762185.aspx
             </summary>
            
        </member>
        <member name="T:Cube.ShFileIinfo">
            
             ShFileIinfo
            
             <summary>
             https://msdn.microsoft.com/en-us/library/windows/desktop/bb759792.aspx
             </summary>
            
        </member>
        <member name="T:Cube.ShStockIconInfo">
            
             ShStockIconInfo
            
             <summary>
             https://msdn.microsoft.com/en-us/library/windows/desktop/bb759805.aspx
             </summary>
            
        </member>
        <member name="T:Cube.ObservableBase">
            
             ObservableBase
            
             <summary>
             Represents the base class that has features of DisposableBase and
             ObservableBase classes.
             </summary>
            
        </member>
        <member name="M:Cube.ObservableBase.#ctor">
            
             ObservableBase
            
             <summary>
             Initializes a new instance of the DisposableObservable class.
             </summary>
            
        </member>
        <member name="M:Cube.ObservableBase.#ctor(System.Int32)">
            
             ObservableBase
            
             <summary>
             Initializes a new instance of the ObservableBasee class
             with the specified capacity.
             </summary>
            
             <param name="capacity">
             Capacity of the internal hash table. If zero is specified,
             the initial capacity of the Hashtable class will be used.
             </param>
            
             <remarks>
             Due to the specification of the Hashtable class, the actual
             capacity will be as follows:
            
             [0,   3] to  2.16 ( 3 * 0.72),
             [4,   7] to  5.04 ( 7 * 0.72),
             [8,  11] to  7.92 (11 * 0.72),
             [12, 17] to 12.24 (17 * 0.72),
             [18, 23] to 16.56 (23 * 0.72),
             [24, 29] to 20.88 (29 * 0.72),
             [30, 37] to 26.64 (37 * 0.72).
             </remarks>
            
        </member>
        <member name="M:Cube.ObservableBase.#ctor(Cube.Dispatcher)">
            
             ObservableBase
            
             <summary>
             Initializes a new instance of the ObservableBasee class
             with the specified dispatcher.
             </summary>
            
             <param name="dispatcher">Dispatcher object.</param>
            
        </member>
        <member name="M:Cube.ObservableBase.#ctor(System.Int32,Cube.Dispatcher)">
            
             ObservableBase
            
             <summary>
             Initializes a new instance of the ObservableBasee class
             with the specified arguments.
             </summary>
            
             <param name="capacity">
             Capacity of the internal hash table. If zero is specified,
             the initial capacity of the Hashtable class will be used.
             </param>
            
             <param name="dispatcher">Dispatcher object.</param>
            
        </member>
        <member name="P:Cube.ObservableBase.Dispatcher">
            
             Dispatcher
            
             <summary>
             Gets or sets the dispatcher object.
             </summary>
            
        </member>
        <member name="E:Cube.ObservableBase.PropertyChanged">
            
             PropertyChanged
            
             <summary>
             Occurs when a property is changed.
             </summary>
            
        </member>
        <member name="M:Cube.ObservableBase.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            
             OnPropertyChanged
            
             <summary>
             Raises the PropertyChanged event with the provided arguments.
             </summary>
            
             <param name="e">Arguments of the event being raised.</param>
            
        </member>
        <member name="M:Cube.ObservableBase.Refresh(System.Collections.Generic.IEnumerable{System.String})">
            
             Refresh
            
             <summary>
             Notifies the update of the specified properties by raising
             the PropertyChanged event.
             </summary>
            
             <param name="names">Property names.</param>
            
        </member>
        <member name="M:Cube.ObservableBase.Refresh(System.String,System.String[])">
            
             Refresh
            
             <summary>
             Notifies the update of the specified properties by raising
             the PropertyChanged event.
             </summary>
            
             <param name="name">Property name.</param>
             <param name="more">More property names.</param>
            
        </member>
        <member name="M:Cube.ObservableBase.Get``1(System.Func{``0},System.String)">
            
             Get
            
             <summary>
             Gets the value of the specified property name. The specified
             property will be initialized with the specified creator object
             as needed.
             </summary>
            
             <param name="creator">Function to create an initial value.</param>
             <param name="name">Name of the property.</param>
            
             <returns>Value of the property.</returns>
            
        </member>
        <member name="M:Cube.ObservableBase.Get``1(System.String)">
            
             Get
            
             <summary>
             Gets the value of the specified property name.
             </summary>
            
             <param name="name">Name of the property.</param>
            
             <returns>Value of the property.</returns>
            
        </member>
        <member name="M:Cube.ObservableBase.Set``1(``0,System.String)">
            
             Set
            
             <summary>
             Sets the specified value to the inner field of the specified
             name if they are not equal.
             </summary>
            
             <param name="value">Value being set.</param>
             <param name="name">Name of the property.</param>
            
             <returns>True for done; false for cancel.</returns>
            
        </member>
        <member name="M:Cube.ObservableBase.Set``1(``0,System.Collections.Generic.IEqualityComparer{``0},System.String)">
            
             Set
            
             <summary>
             Sets the specified value to the inner field of the specified
             name if they are not equal.
             </summary>
            
             <param name="value">Value being set.</param>
             <param name="compare">Function to compare.</param>
             <param name="name">Name of the property.</param>
            
             <returns>True for done; false for cancel.</returns>
            
        </member>
        <member name="M:Cube.ObservableBase.Set``1(``0@,``0,System.String)">
            
             Set
            
             <summary>
             Sets the specified value to the specified field if they are
             not equal.
             </summary>
            
             <param name="field">Reference to the target field.</param>
             <param name="value">Value being set.</param>
             <param name="name">Name of the property.</param>
            
             <returns>True for done; false for cancel.</returns>
            
        </member>
        <member name="M:Cube.ObservableBase.Set``1(``0@,``0,System.Collections.Generic.IEqualityComparer{``0},System.String)">
            
             Set
            
             <summary>
             Set the specified value in the specified field if they are not
             equal.
             </summary>
            
             <param name="field">Reference to the target field.</param>
             <param name="value">Value being set.</param>
             <param name="compare">Function to compare.</param>
             <param name="name">Name of the property.</param>
            
             <returns>True for done; false for cancel.</returns>
            
        </member>
        <member name="T:Cube.ObservableProxy">
            
             ObservableProxy
            
             <summary>
             Provides functionality to forward the PropertyChanged event to
             another object.
             </summary>
            
        </member>
        <member name="M:Cube.ObservableProxy.#ctor(System.ComponentModel.INotifyPropertyChanged,Cube.ObservableBase)">
            
             ObservableProxy
            
             <summary>
             Creates a new instance of the ObservableProxy class with the
             specified arguments.
             </summary>
            
             <param name="src">Source object to forward.</param>
             <param name="dest">Target object to forward.</param>
            
        </member>
        <member name="M:Cube.ObservableProxy.#ctor(System.ComponentModel.INotifyPropertyChanged,Cube.ObservableBase,Cube.ObservableProxy.RuleDictionary)">
            
             ObservableProxy
            
             <summary>
             Creates a new instance of the ObservableProxy class with the
             specified arguments.
             </summary>
            
             <param name="src">Source object to forward.</param>
             <param name="dest">Target object to forward.</param>
             <param name="rules">Forwarding rules.</param>
            
        </member>
        <member name="T:Cube.ObservableProxy.RuleDictionary">
            
             RuleDictionary
            
             <summary>
             Represents the forwarding rules at the ObservableProxy class.
             </summary>
            
        </member>
        <member name="P:Cube.ObservableProxy.Rules">
            
             Rules
            
             <summary>
             Get the forwarding rules.
             </summary>
            
        </member>
        <member name="P:Cube.ObservableProxy.MatchOnly">
            
             MatchOnly
            
             <summary>
             Gets or sets a value indicating whether to forward property names
             that do not match the provided rules.
             </summary>
            
        </member>
        <member name="M:Cube.ObservableProxy.Dispose(System.Boolean)">
            
             Dispose
            
             <summary>
             Releases the unmanaged resources used by the object and
             optionally releases the managed resources.
             </summary>
            
             <param name="disposing">
             true to release both managed and unmanaged resources;
             false to release only unmanaged resources.
             </param>
            
        </member>
        <member name="T:Cube.IObservePropertyChanged">
            
             IObservePropertyChanged
            
             <summary>
             Provides interface to observe the PropertyChanged event of
             INotifyPropertyChanged objects.
             </summary>
            
        </member>
        <member name="M:Cube.IObservePropertyChanged.Observe(System.ComponentModel.INotifyPropertyChanged,System.String[])">
            
             Observe
            
             <summary>
             Observes the PropertyChanged event of the specified object.
             </summary>
            
             <param name="src">Observed object.</param>
             <param name="names">Target property names.</param>
            
        </member>
        <member name="T:Cube.ObserverBase">
            
             ObserverBase
            
             <summary>
             Represents a base class of the IObservePropertyChnaged interface.
             </summary>
            
        </member>
        <member name="M:Cube.ObserverBase.Observe(System.ComponentModel.INotifyPropertyChanged,System.String[])">
            
             Observe
            
             <summary>
             Observes the PropertyChanged event of the specified object.
             </summary>
            
             <param name="src">Observed object.</param>
             <param name="names">
             Target property names. If no name is set, the class responds
             to all PropertyChanged events.
             </param>
            
        </member>
        <member name="M:Cube.ObserverBase.Receive(System.Type,System.String)">
            
             Receive
            
             <summary>
             Invokes when the PropertyChanged event of an observed object
             is fired.
             </summary>
            
             <param name="type">
             Type of object that raises the PropetyChanged event.
             </param>
            
             <param name="name">
             Property name associated with the PropetyChanged event.
             </param>
            
        </member>
        <member name="M:Cube.ObserverBase.Dispose(System.Boolean)">
            
             Dispose
            
             <summary>
             Releases the unmanaged resources used by the object and
             optionally releases the managed resources.
             </summary>
            
             <param name="disposing">
             true to release both managed and unmanaged resources;
             false to release only unmanaged resources.
             </param>
            
        </member>
        <member name="T:Cube.OnceAction">
            
             OnceAction
            
             <summary>
             Provides functionality to invoke the specified action once.
             </summary>
            
        </member>
        <member name="M:Cube.OnceAction.#ctor(System.Action)">
            
             OnceAction
            
             <summary>
             Initializes a new instance of the OnceAction class with the
             specified action.
             </summary>
            
             <param name="action">Action that is invoked once.</param>
            
        </member>
        <member name="M:Cube.OnceAction.Invoke">
            
             Invoke
            
             <summary>
             Invokes the specified action.
             </summary>
            
        </member>
        <member name="T:Cube.OnceAction`1">
            
             OnceAction(T)
            
             <summary>
             Initializes a new instance of the OnceAction class with the
             specified action.
             </summary>
            
        </member>
        <member name="M:Cube.OnceAction`1.#ctor(System.Action{`0})">
            
             OnceAction
            
             <summary>
             Initializes a new instance of the OnceAction class with the
             specified action.
             </summary>
            
             <param name="action">Action that is invoked once.</param>
            
        </member>
        <member name="M:Cube.OnceAction`1.Invoke(`0)">
            
             Invoke
            
             <summary>
             Invokes the specified action with the specified arguments.
             </summary>
            
             <param name="obj">Arguments of the action.</param>
            
        </member>
        <member name="T:Cube.Once`1">
            
             Once(T)
            
             <summary>
             Represents the base class of OnceAction classes.
             </summary>
            
        </member>
        <member name="M:Cube.Once`1.#ctor(`0)">
            
             Once
            
             <summary>
             Initializes a new instance of the Once class with the specified
             value.
             </summary>
            
             <param name="value">Value to be invoked once.</param>
            
        </member>
        <member name="P:Cube.Once`1.IgnoreTwice">
            
             IgnoreTwice
            
             <summary>
             Gets or sets a value indicating whether to ignore the second
             or later call. If set to false, TwiceException will be thrown
             on the second or later.
             </summary>
            
        </member>
        <member name="P:Cube.Once`1.Invoked">
            
             Invoked
            
             <summary>
             Gets a value indicating whether the provided action has been
             already invoked.
             </summary>
            
        </member>
        <member name="M:Cube.Once`1.Invoke(System.Action{`0})">
            
             Invoke
            
             <summary>
             Gets the provided value and invokes the specified callback.
             </summary>
            
             <param name="action">
             Action to be invoked only in the first call.
             </param>
            
        </member>
        <member name="T:Cube.Power">
            
             Power
            
             <summary>
             Provides functionality to observe power mode of the computer.
             </summary>
            
        </member>
        <member name="M:Cube.Power.#cctor">
            
             Power
            
             <summary>
             Initializes a static fields of the Power class.
             </summary>
            
        </member>
        <member name="P:Cube.Power.Mode">
            
             Mode
            
             <summary>
             Gets the power mode.
             </summary>
            
        </member>
        <member name="M:Cube.Power.Subscribe(System.Action)">
            
             Subscribe
            
             <summary>
             Registers the callback to subscription.
             </summary>
            
        </member>
        <member name="M:Cube.Power.Configure(Cube.PowerModeContext)">
            
             Configure
            
             <summary>
             Sets the PowerModeContext object.
             </summary>
            
        </member>
        <member name="M:Cube.Power.WhenPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            
             WhenPropertyChanged
            
             <summary>
             Occurs when the PropertyChanged event is fired.
             </summary>
            
        </member>
        <member name="M:Cube.Power.WhenModeChanged(System.Object,Microsoft.Win32.PowerModeChangedEventArgs)">
            
             WhenModeChanged
            
             <summary>
             Occurs when the PowerModeChanged event is fired.
             </summary>
            
        </member>
        <member name="T:Cube.PowerModeContext">
            
             PowerModeContext
            
             <summary>
             Represents the power mode.
             </summary>
            
        </member>
        <member name="M:Cube.PowerModeContext.#ctor(Microsoft.Win32.PowerModes)">
            
             PowerModeContext
            
             <summary>
             Initializes a new instance of the PowerModeContext class
             with the specified value.
             </summary>
            
             <param name="mode">Initial value for power mode.</param>
            
        </member>
        <member name="P:Cube.PowerModeContext.Mode">
            
             Mode
            
             <summary>
             Gets or sets the power mode.
             </summary>
            
        </member>
        <member name="P:Cube.PowerModeContext.IgnoreStatusChanged">
            
             IgnoreStatusChanged
            
             <summary>
             Gets or sets the value indicating whether ignoring the
             StatusChanged value.
             </summary>
            
        </member>
        <member name="M:Cube.PowerModeContext.Dispose(System.Boolean)">
            
             Dispose
            
             <summary>
             Releases the unmanaged resources used by the object and
             optionally releases the managed resources.
             </summary>
            
             <param name="disposing">
             true to release both managed and unmanaged resources;
             false to release only unmanaged resources.
             </param>
            
        </member>
        <member name="T:Cube.PresentableBase">
            
             PresentableBase
            
             <summary>
             Represents the base behavior of presentable components. (Controller,
             Presenter, ViewModel, and so on)
             </summary>
            
        </member>
        <member name="M:Cube.PresentableBase.#ctor(Cube.Aggregator,System.Threading.SynchronizationContext)">
            
             PresentableBase
            
             <summary>
             Initializes a new instance of the PresentableBase class with
             the specified arguments.
             </summary>
            
             <param name="aggregator">Message aggregator.</param>
             <param name="context">Synchronization context.</param>
            
        </member>
        <member name="P:Cube.PresentableBase.Aggregator">
            
             Aggregator
            
             <summary>
             Gets the message aggregator.
             </summary>
            
        </member>
        <member name="P:Cube.PresentableBase.Context">
            
             Context
            
             <summary>
             Gets the synchronization context.
             </summary>
            
        </member>
        <member name="P:Cube.PresentableBase.Assets">
            
             Assets
            
             <summary>
             Gets the collection of disposable resources that will be
             released automatically when disposing.
             </summary>
            
        </member>
        <member name="M:Cube.PresentableBase.Subscribe``1(System.Action{``0})">
            
             Subscribe
            
             <summary>
             Subscribes the message of type T.
             </summary>
            
             <typeparam name="T">message type.</typeparam>
            
             <param name="callback">
             Action to be invoked when the message of type T is published.
             </param>
            
             <returns>Object to clear the subscription.</returns>
            
        </member>
        <member name="M:Cube.PresentableBase.GetDispatcher(System.Boolean)">
            
             GetDispatcher
            
             <summary>
             Gets a dispatcher object with the specified arguments.
             </summary>
            
             <param name="synchronous">
             Value indicating whether to invoke as synchronous.
             </param>
            
             <returns>Dispatcher object.</returns>
            
        </member>
        <member name="M:Cube.PresentableBase.Dispose(System.Boolean)">
            
             Dispose
            
             <summary>
             Releases the unmanaged resources used by the object and
             optionally releases the managed resources.
             </summary>
            
             <param name="disposing">
             true to release both managed and unmanaged resources;
             false to release only unmanaged resources.
             </param>
            
        </member>
        <member name="M:Cube.PresentableBase.OnMessage(System.Exception)">
            
             OnMessage
            
             <summary>
             Converts the specified exception to a new instance of the
             DialogMessage class.
             </summary>
            
             <param name="src">Source exception.</param>
            
             <returns>DialogMessage object.</returns>
            
             <remarks>
             The Method is called from the Track methods.
             </remarks>
            
        </member>
        <member name="M:Cube.PresentableBase.Post``1(``0)">
            
             Post
            
             <summary>
             Posts the specified message.
             </summary>
            
             <param name="message">Message to be posted.</param>
            
        </member>
        <member name="M:Cube.PresentableBase.Send``1(``0)">
            
             Send
            
             <summary>
             Sends the specified message.
             </summary>
            
             <param name="message">Message to be sent.</param>
            
        </member>
        <member name="M:Cube.PresentableBase.Send``1(Cube.CancelMessage{``0},System.Action{``0},System.Boolean)">
            
             Send
            
             <summary>
             Sends the specified message, and then invokes the specified
             action if the Cancel property is set to false.
             </summary>
            
             <param name="message">Message to be sent.</param>
            
             <param name="next">
             Action to be invoked if the Cancel property of the message is
             set to false.
             </param>
            
             <param name="synchronous">
             Value indicating whether to invoke the specified action as a
             synchronous method.
             </param>
            
        </member>
        <member name="M:Cube.PresentableBase.Send``1(``0,System.Action{``0},System.Boolean)">
            
             Send
            
             <summary>
             Sends a CancelMessage(T) object with the specified source wrapped,
             and then invokes the specified action if the Cancel property is
             set to false.
             </summary>
            
             <param name="src">Source bindable object.</param>
            
             <param name="next">
             Action to be invoked if the Cancel property is set to false.
             </param>
            
             <param name="synchronous">
             Value indicating whether to invoke the specified action as a
             synchronous method.
             </param>
            
        </member>
        <member name="M:Cube.PresentableBase.Run(System.Action,System.Boolean)">
            
             Run
            
             <summary>
             Invokes the specified action, and will send the error message
             if any exceptions are thrown.
             </summary>
            
             <param name="action">
             Action to be invoked.
             </param>
            
             <param name="synchronous">
             Value indicating whether to invoke the specified action as a
             synchronous method.
             </param>
            
        </member>
        <member name="M:Cube.PresentableBase.Run(System.Action,System.Action,System.Boolean)">
            
             Run
            
             <summary>
             Invokes the specified actions, and will send the error message
             if any exceptions are thrown. The next action will always be
             invoked even if the first specified action throws an exception.
             </summary>
            
             <param name="first">Action to be invoked.</param>
            
             <param name="next">
             Action to be invoked afetr the first specified action has finished.
             The action will always be invoked even if the first specified
             action throws an exception.
             </param>
            
             <param name="synchronous">
             Value indicating whether to invoke both of the specified actions
             as synchronous methods.
             </param>
            
        </member>
        <member name="M:Cube.PresentableBase.Quit(System.Action,System.Boolean)">
            
             Quit
            
             <summary>
             Invokes the specified action, and finally sends the close message.
             </summary>
            
             <param name="action">
             Action to be invoked.
             </param>
            
             <param name="synchronous">
             Value indicating whether to invoke the specified action as a
             synchronous method.
             </param>
            
        </member>
        <member name="M:Cube.PresentableBase.Run(System.Boolean,System.Action[])">
            
             Run
            
             <summary>
             Invokes the specified actions and will send the error message
             if any exceptions are thrown. All the specified actions will
             always be invoked. If an action throws an exception, the method
             will send a DialogMessage object corresponding to the exception,
             and then invoke the next action.
             </summary>
            
        </member>
        <member name="T:Cube.PresentableBase`1">
            
             PresentableBase(TModel)
            
             <summary>
             Represents the base presentable class with a model object, which is
             the facade of other models.
             </summary>
            
        </member>
        <member name="M:Cube.PresentableBase`1.#ctor(`0)">
            
             PresentableBase
            
             <summary>
             Initializes a new instance of the PresentableBase class with
             the specified model.
             </summary>
            
             <param name="facade">Model object.</param>
            
        </member>
        <member name="M:Cube.PresentableBase`1.#ctor(`0,Cube.Aggregator)">
            
             Presentable
            
             <summary>
             Initializes a new instance of the Presentable class with the
             specified arguments.
             </summary>
            
             <param name="facade">Model object.</param>
             <param name="aggregator">Message aggregator.</param>
            
        </member>
        <member name="M:Cube.PresentableBase`1.#ctor(`0,Cube.Aggregator,System.Threading.SynchronizationContext)">
            
             Presentable
            
             <summary>
             Initializes a new instance of the Presentable class with the
             specified arguments.
             </summary>
            
             <param name="facade">Model object.</param>
             <param name="aggregator">Message aggregator.</param>
             <param name="context">Synchronization context.</param>
            
        </member>
        <member name="P:Cube.PresentableBase`1.Facade">
            
             Facade
            
             <summary>
             Gets the facade of model objects.
             </summary>
            
        </member>
        <member name="M:Cube.PresentableBase`1.Dispose(System.Boolean)">
            
             Dispose
            
             <summary>
             Releases the unmanaged resources used by the object and
             optionally releases the managed resources.
             </summary>
            
             <param name="disposing">
             true to release both managed and unmanaged resources;
             false to release only unmanaged resources.
             </param>
            
        </member>
        <member name="T:Cube.IQuery`2">
            
             IQuery(T, U)
            
             <summary>
             Represents the query provider.
             </summary>
            
        </member>
        <member name="M:Cube.IQuery`2.Request(Cube.QueryMessage{`0,`1})">
            
             Request
            
             <summary>
             Invokes the request with the specified message.
             </summary>
            
             <param name="message">Message to request.</param>
            
        </member>
        <member name="T:Cube.IQuery`1">
            
             IQuery(T)
            
             <summary>
             Represents the query provider.
             </summary>
            
        </member>
        <member name="T:Cube.Query`2">
            
             Query(T, U)
            
             <summary>
             Represents the IQuery(T, U) implementation.
             </summary>
            
        </member>
        <member name="M:Cube.Query`2.#ctor(System.Action{Cube.QueryMessage{`0,`1}})">
            
             Query
            
             <summary>
             Initializes a new instance of the Query class with the
             specified callback.
             </summary>
            
             <param name="callback">Callback function.</param>
            
        </member>
        <member name="M:Cube.Query`2.#ctor(System.Action{Cube.QueryMessage{`0,`1}},Cube.Dispatcher)">
            
             Query
            
             <summary>
             Initializes a new instance of the Query class with the
             specified arguments.
             </summary>
            
             <param name="callback">Callback function.</param>
             <param name="dispatcher">Dispatcher object.</param>
            
        </member>
        <member name="M:Cube.Query`2.Request(Cube.QueryMessage{`0,`1})">
            
             Request
            
             <summary>
             Invokes the request with the specified message.
             </summary>
            
             <param name="message">Message to request.</param>
            
        </member>
        <member name="T:Cube.Query`1">
            
             Query(T)
            
             <summary>
             Represents the IQuery(T, T) implementation.
             </summary>
            
        </member>
        <member name="M:Cube.Query`1.#ctor(System.Action{Cube.QueryMessage{`0,`0}})">
            
             Query
            
             <summary>
             Initializes a new instance of the Query class with the
             specified callback.
             </summary>
            
             <param name="callback">Callback function.</param>
            
        </member>
        <member name="M:Cube.Query`1.#ctor(System.Action{Cube.QueryMessage{`0,`0}},Cube.Dispatcher)">
            
             Query
            
             <summary>
             Initializes a new instance of the Query class with the
             specified arguments.
             </summary>
            
             <param name="callback">Callback function.</param>
             <param name="dispatcher">Dispatcher object.</param>
            
        </member>
        <member name="T:Cube.OnceQuery`2">
            
             OnceQuery(T, U)
            
             <summary>
             Represents the IQuery(T, U) implementation that allows only once.
             </summary>
            
        </member>
        <member name="M:Cube.OnceQuery`2.#ctor(System.Action{Cube.QueryMessage{`0,`1}})">
            
             OnceQuery
            
             <summary>
             Initializes a new instance of the Query class with the
             specified callback.
             </summary>
            
             <param name="callback">Callback function.</param>
            
        </member>
        <member name="M:Cube.OnceQuery`2.#ctor(System.Action{Cube.QueryMessage{`0,`1}},Cube.Dispatcher)">
            
             OnceQuery
            
             <summary>
             Initializes a new instance of the Query class with the
             specified arguments.
             </summary>
            
             <param name="callback">Callback function.</param>
             <param name="dispatcher">Dispatcher object.</param>
            
        </member>
        <member name="M:Cube.OnceQuery`2.Request(Cube.QueryMessage{`0,`1})">
            
             Request
            
             <summary>
             Invokes the request with the specified message.
             </summary>
            
             <param name="message">Message to request.</param>
            
             <exception cref="T:Cube.TwiceException">
             Occurs when called twice.
             </exception>
            
        </member>
        <member name="T:Cube.OnceQuery`1">
            
             OnceQuery(T)
            
             <summary>
             Represents the IQuery(T) implementation that allows only once.
             </summary>
            
        </member>
        <member name="M:Cube.OnceQuery`1.#ctor(System.Action{Cube.QueryMessage{`0,`0}})">
            
             OnceQuery
            
             <summary>
             Initializes a new instance of the Query class with the
             specified callback.
             </summary>
            
             <param name="callback">Callback function.</param>
            
        </member>
        <member name="M:Cube.OnceQuery`1.#ctor(System.Action{Cube.QueryMessage{`0,`0}},Cube.Dispatcher)">
            
             OnceQuery
            
             <summary>
             Initializes a new instance of the Query class with the
             specified arguments.
             </summary>
            
             <param name="callback">Callback function.</param>
             <param name="dispatcher">Dispatcher object.</param>
            
        </member>
        <member name="T:Cube.QueryDispatcher">
            
             QueryDispatcher
            
             <summary>
             Provides functionality to create a dispatcher.
             </summary>
            
        </member>
        <member name="M:Cube.QueryDispatcher.Create">
            
             Create
            
             <summary>
             Creates a new instance of the Dispatcher class.
             </summary>
            
        </member>
        <member name="T:Cube.Query">
            
             Query
            
             <summary>
             Provides functionality to create a new instance of the Query(T, U)
             or related classes.
             </summary>
            
        </member>
        <member name="M:Cube.Query.NewMessage``1(``0)">
            
             NewMessage
            
             <summary>
             Creates a new instance of the QueryMessage(T, T) class with
             the specified query.
             </summary>
            
             <typeparam name="T">type of source and result.</typeparam>
            
             <param name="src">Source information.</param>
            
             <returns>QueryMessage(T, T) object.</returns>
            
        </member>
        <member name="M:Cube.Query.NewMessage``2(``0)">
            
             NewMessage
            
             <summary>
             Creates a new instance of the QueryMessage(T, U) class with
             the specified query.
             </summary>
            
             <typeparam name="T">type of query source.</typeparam>
             <typeparam name="U">type of result value.</typeparam>
            
             <param name="src">Source information.</param>
            
             <returns>QueryMessage(T, U) object.</returns>
            
        </member>
        <member name="M:Cube.Query.NewMessage``2(``0,``1)">
            
             NewMessage
            
             <summary>
             Creates a new instance of the QueryMessage(T, U) class with
             the specified query and default value.
             </summary>
            
             <typeparam name="T">type of query source.</typeparam>
             <typeparam name="U">type of result value.</typeparam>
            
             <param name="src">Source information.</param>
             <param name="value">Default value of the message.</param>
            
             <returns>QueryMessage(T, U) object.</returns>
            
        </member>
        <member name="T:Cube.SettingFolder`1">
            
             SettingFolder(T)
            
             <summary>
             Provides functionality to load and save user settings.
             </summary>
            
        </member>
        <member name="M:Cube.SettingFolder`1.#ctor(Cube.DataContract.Format,System.Reflection.Assembly)">
            
             SettingFolder(T)
            
             <summary>
             Initializes a new instance of the SettingsFolder class with
             the specified arguments.
             </summary>
            
             <param name="assembly">Assembly information.</param>
             <param name="format">Serialization format.</param>
            
        </member>
        <member name="M:Cube.SettingFolder`1.#ctor(Cube.DataContract.Format,System.String,Cube.SoftwareVersion)">
            
             SettingFolder(T)
            
             <summary>
             Initializes a new instance of the SettingsFolder class with
             the specified arguments.
             </summary>
            
             <param name="format">Serialization format.</param>
             <param name="location">Saved data location.</param>
             <param name="version">Software version.</param>
            
        </member>
        <member name="P:Cube.SettingFolder`1.Value">
            
             Value
            
             <summary>
             Gets a value that represents user settings.
             </summary>
            
        </member>
        <member name="P:Cube.SettingFolder`1.Format">
            
             Format
            
             <summary>
             Gets or sets the serialization format.
             </summary>
            
        </member>
        <member name="P:Cube.SettingFolder`1.Location">
            
             Location
            
             <summary>
             Gets or sets the location that the serialized data is saved in.
             </summary>
            
        </member>
        <member name="P:Cube.SettingFolder`1.Version">
            
             Version
            
             <summary>
             Gets the software version.
             </summary>
            
        </member>
        <member name="P:Cube.SettingFolder`1.AutoSave">
            
             AutoSave
            
             <summary>
             Gets or sets the value indicating whether saving automatically
             when user settings are changed.
             </summary>
            
        </member>
        <member name="P:Cube.SettingFolder`1.AutoSaveDelay">
            
             AutoSaveDelay
            
             <summary>
             Gets or sets the delay between detecting changed in user
             settings and saving them.
             </summary>
            
             <remarks>
             In the case of AutoSave mode, there is a possibility that a large
             number of saves will be performed in a short period of time,
             and SettingsFolder avoids these problems by holding off on saving
             for a certain amount of time since the last property change.
             </remarks>
            
        </member>
        <member name="M:Cube.SettingFolder`1.Load">
            
             Load
            
             <summary>
             Loads the user settings.
             </summary>
            
        </member>
        <member name="M:Cube.SettingFolder`1.OnLoad">
            
             OnLoad
            
             <summary>
             Loads the user settings.
             </summary>
            
             <remarks>
             If the method fails, the AutoSave property will forcibly be
             disabled in order to prevent unexpected values from being
             automatically saved.
             </remarks>
            
        </member>
        <member name="M:Cube.SettingFolder`1.Save">
            
             Save
            
             <summary>
             Saves user settings.
             </summary>
            
        </member>
        <member name="M:Cube.SettingFolder`1.OnSave">
            
             OnSave
            
             <summary>
             Saves user settings.
             </summary>
            
             <remarks>
             If the method fails, the AutoSave property will forcibly be
             disabled not to fail to invoke the Dispose method.
             </remarks>
            
        </member>
        <member name="M:Cube.SettingFolder`1.Dispose(System.Boolean)">
            
             Dispose
            
             <summary>
             Releases the unmanaged resources used by the SettingsFolder
             and optionally releases the managed resources.
             </summary>
            
             <param name="disposing">
             true to release both managed and unmanaged resources;
             false to release only unmanaged resources.
             </param>
            
        </member>
        <member name="M:Cube.SettingFolder`1.GetLocation(Cube.DataContract.Format,System.Reflection.Assembly)">
            
             GetLocation
            
             <summary>
             Gets the location of serialization data.
             </summary>
            
        </member>
        <member name="M:Cube.SettingFolder`1.WhenChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            
             WhenChanged
            
             <summary>
             Occurs when the PropertyChanged event of the Value property
             is fired.
             </summary>
            
        </member>
        <member name="T:Cube.SoftwareVersion">
            
             SoftwareVersion
            
             <summary>
             Represents the software version.
             </summary>
            
        </member>
        <member name="M:Cube.SoftwareVersion.#ctor">
            
             SoftwareVersion
            
             <summary>
             Initializes a new instance of the class.
             </summary>
            
        </member>
        <member name="M:Cube.SoftwareVersion.#ctor(System.Version)">
            
             SoftwareVersion
            
             <summary>
             Initializes a new instance of the class with the specified
             arguments.
             </summary>
            
             <param name="src">Version object.</param>
            
        </member>
        <member name="M:Cube.SoftwareVersion.#ctor(System.String)">
            
             SoftwareVersion
            
             <summary>
             Initializes a new instance of the class with the specified
             string.
             </summary>
            
             <param name="src">
             String value that represents the version.
             </param>
            
        </member>
        <member name="P:Cube.SoftwareVersion.Number">
            
             Number
            
             <summary>
             Gets or sets the value that represents the version number.
             </summary>
            
        </member>
        <member name="P:Cube.SoftwareVersion.Prefix">
            
             Prefix
            
             <summary>
             Gets or sets the prefix of the version.
             </summary>
            
        </member>
        <member name="P:Cube.SoftwareVersion.Suffix">
            
             Suffix
            
             <summary>
             Gets or sets the suffix of the version.
             </summary>
            
        </member>
        <member name="P:Cube.SoftwareVersion.Architecture">
            
             Architecture
            
             <summary>
             Gets the architecture identification (32bit or 64bit).
             </summary>
            
        </member>
        <member name="M:Cube.SoftwareVersion.ToString">
            
             ToString
            
             <summary>
             Returns the string that represents the version without the
             platform identification.
             </summary>
            
             <returns>String for the version.</returns>
            
        </member>
        <member name="M:Cube.SoftwareVersion.ToString(System.Int32,System.Boolean)">
            
             ToString
            
             <summary>
             Returns the string that represents the version.
             </summary>
            
             <param name="digit">Number of display digits</param>
             <param name="architecture">
             Indicates whether the architecture identification is displayed.
             </param>
            
             <returns>String for the version.</returns>
            
        </member>
        <member name="M:Cube.SoftwareVersion.AppendNumber(System.Text.StringBuilder,System.Int32)">
            
             AppendNumber
            
             <summary>
             Appends the version number to the specified object.
             </summary>
            
        </member>
        <member name="M:Cube.SoftwareVersion.Append(System.Text.StringBuilder,System.String)">
            
             Append
            
             <summary>
             Appends the specified value.
             </summary>
            
        </member>
        <member name="T:Cube.SoftwareVersionComparer">
            
             SoftwareVersionComparer
            
             <summary>
             Provides functionality to compare SoftwareVersion values.
             </summary>
            
        </member>
        <member name="M:Cube.SoftwareVersionComparer.Compare(Cube.SoftwareVersion,Cube.SoftwareVersion)">
            
             Compare
            
             <summary>
             Compares two objects of type T and returns an indication of
             their relative sort order.
             </summary>
            
             <param name="x">The first object to compare.</param>
             <param name="y">The second object to compare.</param>
            
             <returns>
             Zero if the specified objects are equal;
             Less than zero if x is less than y;
             otherwise, Greater than zero.
             </returns>
            
        </member>
        <member name="M:Cube.SoftwareVersionComparer.Compare(System.Object,System.Object)">
            
             Compare
            
             <summary>
             Compares two objects and returns an indication of their
             relative sort order.
             </summary>
            
             <param name="x">The first object to compare.</param>
             <param name="y">The second object to compare.</param>
            
             <returns>
             Zero if the specified objects are equal;
             Less than zero if x is less than y or x is null;
             otherwise, Greater than zero.
             </returns>
            
        </member>
        <member name="M:Cube.SoftwareVersionComparer.Equals(Cube.SoftwareVersion,Cube.SoftwareVersion)">
            
             Equals
            
             <summary>
             Determines whether two objects of type T are equal.
             </summary>
            
             <param name="x">The first object to compare.</param>
             <param name="y">The second object to compare.</param>
            
             <returns>
             true if the specified objects are equal; otherwise, false.
             </returns>
            
        </member>
        <member name="M:Cube.SoftwareVersionComparer.Equals(System.Object,System.Object)">
            
             Equals
            
             <summary>
             Determines whether two objects are equal.
             </summary>
            
             <param name="x">The first object to compare.</param>
             <param name="y">The second object to compare.</param>
            
             <returns>
             true if the specified objects are equal; otherwise, false.
             </returns>
            
        </member>
        <member name="M:Cube.SoftwareVersionComparer.GetHashCode(Cube.SoftwareVersion)">
            
             GetHashCode
            
             <summary>
             Serves as a hash function for the specified object for hashing
             algorithms and data structures, such as a hash table.
             </summary>
            
             <param name="obj">
             The object for which to get a hash code.
             </param>
            
             <returns>Hash code for the specified object.</returns>
            
        </member>
        <member name="M:Cube.SoftwareVersionComparer.GetHashCode(System.Object)">
            
             GetHashCode
            
             <summary>
             Serves as a hash function for the specified object for hashing
             algorithms and data structures, such as a hash table.
             </summary>
            
             <param name="obj">
             The object for which to get a hash code.
             </param>
            
             <returns>Hash code for the specified object.</returns>
            
        </member>
        <member name="M:Cube.SoftwareVersionComparer.Zero(System.Int32)">
            
             Zero
            
             <summary>
             Returns zero if the specified value is negative.
             </summary>
            
        </member>
        <member name="M:Cube.SoftwareVersionComparer.CompareValue(System.Int32,System.Int32)">
            
             CompareValue
            
             <summary>
             Compares the specified values.
             </summary>
            
        </member>
        <member name="M:Cube.SoftwareVersionComparer.CompareValue(System.String,System.String)">
            
             CompareValue
            
             <summary>
             Compares the specified values.
             </summary>
            
        </member>
        <member name="T:Cube.StreamProxy">
            
             StreamProxy
            
             <summary>
             Provides a proxy of the original Stream instance.
             </summary>
            
        </member>
        <member name="M:Cube.StreamProxy.#ctor(System.IO.Stream)">
            
             StreamProxy
            
             <summary>
             Initializes a new instance of the StreamProxy class with the
             specified stream.
             </summary>
            
             <param name="stream">Original stream.</param>
            
        </member>
        <member name="M:Cube.StreamProxy.#ctor(System.IO.Stream,System.Boolean)">
            
             StreamProxy
            
             <summary>
             Initializes a new instance of the StreamProxy class with the
             specified parameters.
             </summary>
            
             <param name="stream">Original stream.</param>
             <param name="leaveOpen">
             true to leave the stream open after the StreamProxy object
             is disposed; otherwise, false.
             </param>
            
        </member>
        <member name="P:Cube.StreamProxy.CanRead">
            
             CanRead
            
             <summary>
             Gets a value indicating whether the current stream supports
             reading.
             </summary>
            
        </member>
        <member name="P:Cube.StreamProxy.CanSeek">
            
             CanSeek
            
             <summary>
             Gets a value indicating whether the current stream supports
             seeking.
             </summary>
            
        </member>
        <member name="P:Cube.StreamProxy.CanWrite">
            
             CanWrite
            
             <summary>
             Gets a value indicating whether the current stream supports
             writing.
             </summary>
            
        </member>
        <member name="P:Cube.StreamProxy.Length">
            
             Length
            
             <summary>
             Gets the length of the stream in bytes.
             </summary>
            
        </member>
        <member name="P:Cube.StreamProxy.Position">
            
             Position
            
             <summary>
             Gets or sets the current position within the stream.
             </summary>
            
        </member>
        <member name="M:Cube.StreamProxy.Flush">
            
             Flush
            
             <summary>
             Clears all buffers for this stream and causes any buffered
             data to be written to the underlying device.
             </summary>
            
        </member>
        <member name="M:Cube.StreamProxy.Seek(System.Int64,System.IO.SeekOrigin)">
            
             Seek
            
             <summary>
             Sets the position within the current stream.
             </summary>
            
        </member>
        <member name="M:Cube.StreamProxy.SetLength(System.Int64)">
            
             SetLength
            
             <summary>
             Sets the length of the current stream.
             </summary>
            
        </member>
        <member name="M:Cube.StreamProxy.Read(System.Byte[],System.Int32,System.Int32)">
            
             Read
            
             <summary>
             Reads a sequence of bytes from the current stream and advances
             the position within the stream by the number of bytes read.
             </summary>
            
        </member>
        <member name="M:Cube.StreamProxy.Write(System.Byte[],System.Int32,System.Int32)">
            
             Write
            
             <summary>
             writes a sequence of bytes to the current stream and advances
             the current position within this stream by the number of
             bytes written.
             </summary>
            
        </member>
        <member name="M:Cube.StreamProxy.Dispose(System.Boolean)">
            
             Dispose
            
             <summary>
             Releases the unmanaged resources used by the object
             and optionally releases the managed resources.
             </summary>
            
             <param name="disposing">
             true to release both managed and unmanaged resources;
             false to release only unmanaged resources.
             </param>
            
        </member>
        <member name="T:Cube.Synchronous.WakeableTimerExtension">
            
             WakeableTimerExtension
            
             <summary>
             Provides extended methods of the WakeableTimer class.
             </summary>
            
        </member>
        <member name="M:Cube.Synchronous.WakeableTimerExtension.SubscribeSync(Cube.WakeableTimer,System.Action)">
            
             SubscribeSync
            
             <summary>
             Sets the specified action to the timer.
             </summary>
            
             <param name="src">WakeableTimer object.</param>
             <param name="callback">User action.</param>
            
             <returns>Object to remove from the subscription.</returns>
            
        </member>
        <member name="T:Cube.TwiceException">
            
             TwiceException
            
             <summary>
             Represents the exception of executing twice.
             </summary>
            
        </member>
        <member name="M:Cube.TwiceException.#ctor">
            
             TwiceException
            
             <summary>
             Initializes a new instance of the TwiceException class.
             </summary>
            
        </member>
        <member name="T:Cube.WakeableTimerBase">
            
             WakeableTimerBase
            
             <summary>
             Represents the base class of timer that suspends/resumes
             corresponding to the power mode.
             </summary>
            
        </member>
        <member name="M:Cube.WakeableTimerBase.#ctor">
            
             WakeableTimerBase
            
             <summary>
             Initializes a new instance of the WakeableTimerBase class.
             </summary>
            
        </member>
        <member name="P:Cube.WakeableTimerBase.State">
            
             State
            
             <summary>
             Gets the current timer state.
             </summary>
            
        </member>
        <member name="P:Cube.WakeableTimerBase.Interval">
            
             Interval
            
             <summary>
             Gets or sets the execution interval.
             </summary>
            
        </member>
        <member name="P:Cube.WakeableTimerBase.Last">
            
             Last
            
             <summary>
             Gets the last time to invoke the action.
             </summary>
            
        </member>
        <member name="P:Cube.WakeableTimerBase.Next">
            
             Next
            
             <summary>
             Gets or sets the time when the registered actions are invoked
             next time.
             </summary>
            
        </member>
        <member name="M:Cube.WakeableTimerBase.Reset">
            
             Reset
            
             <summary>
             Resets some condition.
             </summary>
            
        </member>
        <member name="M:Cube.WakeableTimerBase.Start">
            
             Start
            
             <summary>
             Starts or resumes the timer.
             </summary>
            
        </member>
        <member name="M:Cube.WakeableTimerBase.Start(System.TimeSpan)">
            
             Start
            
             <summary>
             Starts or resumes the timer with the specified time.
             </summary>
            
             <param name="delay">Initial delay.</param>
            
        </member>
        <member name="M:Cube.WakeableTimerBase.Stop">
            
             Stop
            
             <summary>
             Stops the timer.
             </summary>
            
        </member>
        <member name="M:Cube.WakeableTimerBase.Suspend">
            
             Suspend
            
             <summary>
             Suspends the timer.
             </summary>
            
        </member>
        <member name="M:Cube.WakeableTimerBase.OnTick">
            
             OnTick
            
             <summary>
             Occurs when the timer is expired.
             </summary>
            
        </member>
        <member name="M:Cube.WakeableTimerBase.OnReset">
            
             OnReset
            
             <summary>
             Resets inner fields.
             </summary>
            
        </member>
        <member name="M:Cube.WakeableTimerBase.OnPowerModeChanged">
            
             OnPowerModeChanged
            
             <summary>
             Raises the PowerModeChanged event.
             </summary>
            
        </member>
        <member name="M:Cube.WakeableTimerBase.Resume(System.TimeSpan)">
            
             Resume
            
             <summary>
             Resumes the timer.
             </summary>
            
             <param name="min">Minimum delay.</param>
            
        </member>
        <member name="M:Cube.WakeableTimerBase.Dispose(System.Boolean)">
            
             Dispose
            
             <summary>
             Releases the unmanaged resources used by the WakeableTimer
             and optionally releases the managed resources.
             </summary>
            
             <param name="disposing">
             true to release both managed and unmanaged resources;
             false to release only unmanaged resources.
             </param>
            
        </member>
        <member name="M:Cube.WakeableTimerBase.Restart(System.DateTime)">
            
             Restart
            
             <summary>
             Restarts the timer.
             </summary>
            
             <remarks>
             As a general rule, execution will start at the interval set by
             the user. However, if the total processing time of the handlers
             registered in Subscribe exceeds the interval set by the user,
             the next processing will be executed after an interval of
             at least 1/10 of a second.
             </remarks>
            
        </member>
        <member name="M:Cube.WakeableTimerBase.Restart(System.Double)">
            
             Restart
            
             <summary>
             Restarts the timer.
             </summary>
            
        </member>
        <member name="M:Cube.WakeableTimerBase.RaiseTick(System.Object,System.Timers.ElapsedEventArgs)">
            
             RaiseTick
            
             <summary>
             Occurs at the provided intervals.
             </summary>
            
        </member>
        <member name="T:Cube.WakeableTimer">
            
             WakeableTimer
            
             <summary>
             Represents the timer that suspends/resumes corresponding to the
             power mode.
             </summary>
            
        </member>
        <member name="M:Cube.WakeableTimer.Subscribe(Cube.AsyncAction)">
            
             Subscribe
            
             <summary>
             Sets the specified asynchronous action to the timer.
             </summary>
            
             <param name="callback">Asynchronous user action.</param>
            
             <returns>Object to remove from the subscription.</returns>
            
        </member>
        <member name="M:Cube.WakeableTimer.OnTick">
            
             OnTick
            
             <summary>
             Occurs when the timer is expired.
             </summary>
            
        </member>
        <member name="T:Cube.TimerState">
            
             TimerState
            
             <summary>
             Specifies the timer state.
             </summary>
            
        </member>
        <member name="F:Cube.TimerState.Run">
            <summary>Run</summary>
        </member>
        <member name="F:Cube.TimerState.Stop">
            <summary>Stop</summary>
        </member>
        <member name="F:Cube.TimerState.Suspend">
            <summary>Suspend</summary>
        </member>
        <member name="F:Cube.TimerState.Unknown">
            <summary>Unknown</summary>
        </member>
    </members>
</doc>
